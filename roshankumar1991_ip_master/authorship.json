[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"roshankumar1991"},"content":"# command.Duke project template","lastModifiedDate":"2022-09-09"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it.","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"## Setting up in Intellij","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update Intellij to the most recent version.","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project first)","lastModifiedDate":"2021-01-17"},{"lineNumber":10,"author":{"gitId":"-"},"content":"1. Open the project into Intellij as follows:","lastModifiedDate":"2021-01-17"},{"lineNumber":11,"author":{"gitId":"-"},"content":"   1. Click `Open`.","lastModifiedDate":"2021-01-17"},{"lineNumber":12,"author":{"gitId":"-"},"content":"   1. Select the project directory, and click `OK`.","lastModifiedDate":"2021-01-17"},{"lineNumber":13,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults.","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"1. Configure the project to use **JDK 11** (not other versions) as explained in [here](https://www.jetbrains.com/help/idea/sdk.html#set-up-jdk).\u003cbr\u003e","lastModifiedDate":"2021-07-29"},{"lineNumber":15,"author":{"gitId":"-"},"content":"   In the same dialog, set the **Project language level** field to the `SDK default` option.","lastModifiedDate":"2021-07-29"},{"lineNumber":16,"author":{"gitId":"roshankumar1991"},"content":"3. After that, locate the `src/main/java/command.Duke.java` file, right-click it, and choose `Run command.Duke.main()` (if the code editor is showing compile errors, try restarting the IDE). If the setup is correct, you should see something like the below as the output:","lastModifiedDate":"2022-09-09"},{"lineNumber":17,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"   Hello from","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    ____        _        ","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"   |  _ \\ _   _| | _____ ","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"   | | | | | | | |/ / _ \\","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"   | |_| | |_| |   \u003c  __/","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"   |____/ \\__,_|_|\\_\\___|","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"-":22,"roshankumar1991":2}},{"path":"src/main/java/command/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"roshankumar1991"},"content":"package command;","lastModifiedDate":"2022-09-09"},{"lineNumber":2,"author":{"gitId":"roshankumar1991"},"content":"","lastModifiedDate":"2022-09-09"},{"lineNumber":3,"author":{"gitId":"roshankumar1991"},"content":"import java.io.File;","lastModifiedDate":"2022-09-18"},{"lineNumber":4,"author":{"gitId":"roshankumar1991"},"content":"import java.io.FileWriter;","lastModifiedDate":"2022-09-18"},{"lineNumber":5,"author":{"gitId":"roshankumar1991"},"content":"import java.io.IOException;","lastModifiedDate":"2022-09-18"},{"lineNumber":6,"author":{"gitId":"roshankumar1991"},"content":"import java.nio.file.Files;","lastModifiedDate":"2022-09-18"},{"lineNumber":7,"author":{"gitId":"roshankumar1991"},"content":"import java.nio.file.Path;","lastModifiedDate":"2022-09-18"},{"lineNumber":8,"author":{"gitId":"roshankumar1991"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2022-09-18"},{"lineNumber":9,"author":{"gitId":"roshankumar1991"},"content":"import java.util.ArrayList;","lastModifiedDate":"2022-09-18"},{"lineNumber":10,"author":{"gitId":"roshankumar1991"},"content":"import java.util.Scanner;","lastModifiedDate":"2022-08-19"},{"lineNumber":11,"author":{"gitId":"roshankumar1991"},"content":"import task.*;","lastModifiedDate":"2022-09-18"},{"lineNumber":12,"author":{"gitId":"roshankumar1991"},"content":"","lastModifiedDate":"2022-09-18"},{"lineNumber":13,"author":{"gitId":"roshankumar1991"},"content":"/**","lastModifiedDate":"2022-09-18"},{"lineNumber":14,"author":{"gitId":"roshankumar1991"},"content":" * \u003ch2\u003e Duke, your personalized task manager \u003c/h2\u003e","lastModifiedDate":"2022-09-18"},{"lineNumber":15,"author":{"gitId":"roshankumar1991"},"content":" * \u003cbr\u003eThis task manager shall assist to add / remove various kinds of tasks that might include their estimated completion dates.","lastModifiedDate":"2022-09-18"},{"lineNumber":16,"author":{"gitId":"roshankumar1991"},"content":" * \u003cbr\u003eIt also allows you to view your current tasks at hand, check if they have been completed and check which tasks occur on any given date.","lastModifiedDate":"2022-09-18"},{"lineNumber":17,"author":{"gitId":"roshankumar1991"},"content":" * \u003cp\u003e","lastModifiedDate":"2022-09-18"},{"lineNumber":18,"author":{"gitId":"roshankumar1991"},"content":" * Its error-detection and user-input flexibility makes this task manager more functional and user-friendly.","lastModifiedDate":"2022-09-18"},{"lineNumber":19,"author":{"gitId":"roshankumar1991"},"content":" * \u003cbr\u003eHope you enjoy using this task manager !","lastModifiedDate":"2022-09-18"},{"lineNumber":20,"author":{"gitId":"roshankumar1991"},"content":" *","lastModifiedDate":"2022-09-18"},{"lineNumber":21,"author":{"gitId":"roshankumar1991"},"content":" * @author Roshan Kumar","lastModifiedDate":"2022-09-18"},{"lineNumber":22,"author":{"gitId":"roshankumar1991"},"content":" * @version 1.0","lastModifiedDate":"2022-09-18"},{"lineNumber":23,"author":{"gitId":"roshankumar1991"},"content":" * @since 18/09/2022","lastModifiedDate":"2022-09-18"},{"lineNumber":24,"author":{"gitId":"roshankumar1991"},"content":" */","lastModifiedDate":"2022-09-18"},{"lineNumber":25,"author":{"gitId":"roshankumar1991"},"content":"","lastModifiedDate":"2022-09-18"},{"lineNumber":26,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":27,"author":{"gitId":"roshankumar1991"},"content":"","lastModifiedDate":"2022-09-18"},{"lineNumber":28,"author":{"gitId":"roshankumar1991"},"content":"    /**","lastModifiedDate":"2022-09-18"},{"lineNumber":29,"author":{"gitId":"roshankumar1991"},"content":"     * This is the main method which does 2 key things to get the program started.","lastModifiedDate":"2022-09-18"},{"lineNumber":30,"author":{"gitId":"roshankumar1991"},"content":"     *\u003cbr\u003e  1. It loads any previously stored Tasks List into the current program, so you can continue from that point forward.","lastModifiedDate":"2022-09-18"},{"lineNumber":31,"author":{"gitId":"roshankumar1991"},"content":"     *\u003cbr\u003e  2. Lets you add various task types accordingly.","lastModifiedDate":"2022-09-18"},{"lineNumber":32,"author":{"gitId":"roshankumar1991"},"content":"     *","lastModifiedDate":"2022-09-18"},{"lineNumber":33,"author":{"gitId":"roshankumar1991"},"content":"     * @see DukeException","lastModifiedDate":"2022-09-18"},{"lineNumber":34,"author":{"gitId":"roshankumar1991"},"content":"     */","lastModifiedDate":"2022-09-18"},{"lineNumber":35,"author":{"gitId":"roshankumar1991"},"content":"    public static int count \u003d 0;","lastModifiedDate":"2022-08-19"},{"lineNumber":36,"author":{"gitId":"roshankumar1991"},"content":"    public static boolean trigger \u003d true;","lastModifiedDate":"2022-09-18"},{"lineNumber":37,"author":{"gitId":"roshankumar1991"},"content":"    public static ArrayList\u003cTask\u003e list \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2022-09-18"},{"lineNumber":38,"author":{"gitId":"roshankumar1991"},"content":"","lastModifiedDate":"2022-08-19"},{"lineNumber":39,"author":{"gitId":"roshankumar1991"},"content":"    private static void writeToFile(String filePath) throws IOException {","lastModifiedDate":"2022-09-18"},{"lineNumber":40,"author":{"gitId":"roshankumar1991"},"content":"        FileWriter fw \u003d new FileWriter(filePath);","lastModifiedDate":"2022-09-18"},{"lineNumber":41,"author":{"gitId":"roshankumar1991"},"content":"        for (Task l : list) {","lastModifiedDate":"2022-09-18"},{"lineNumber":42,"author":{"gitId":"roshankumar1991"},"content":"            fw.write(l + System.lineSeparator());","lastModifiedDate":"2022-09-18"},{"lineNumber":43,"author":{"gitId":"roshankumar1991"},"content":"        }","lastModifiedDate":"2022-09-18"},{"lineNumber":44,"author":{"gitId":"roshankumar1991"},"content":"        fw.close();","lastModifiedDate":"2022-09-18"},{"lineNumber":45,"author":{"gitId":"roshankumar1991"},"content":"    }","lastModifiedDate":"2022-09-18"},{"lineNumber":46,"author":{"gitId":"roshankumar1991"},"content":"","lastModifiedDate":"2022-09-18"},{"lineNumber":47,"author":{"gitId":"roshankumar1991"},"content":"    private static void printFileContents(String filePath) throws DukeException , IOException {","lastModifiedDate":"2022-09-18"},{"lineNumber":48,"author":{"gitId":"roshankumar1991"},"content":"        File f \u003d new File(filePath); // create a File for the given file path","lastModifiedDate":"2022-09-18"},{"lineNumber":49,"author":{"gitId":"roshankumar1991"},"content":"        Scanner s \u003d new Scanner(f); // create a Scanner using the File as the source","lastModifiedDate":"2022-09-18"},{"lineNumber":50,"author":{"gitId":"roshankumar1991"},"content":"        if (!s.hasNext()) {","lastModifiedDate":"2022-09-18"},{"lineNumber":51,"author":{"gitId":"roshankumar1991"},"content":"            System.out.println(\"No existing data is found\");","lastModifiedDate":"2022-09-18"},{"lineNumber":52,"author":{"gitId":"roshankumar1991"},"content":"        }","lastModifiedDate":"2022-09-18"},{"lineNumber":53,"author":{"gitId":"roshankumar1991"},"content":"        while (s.hasNext()) {","lastModifiedDate":"2022-09-18"},{"lineNumber":54,"author":{"gitId":"roshankumar1991"},"content":"            String current \u003d s.nextLine();","lastModifiedDate":"2022-09-18"},{"lineNumber":55,"author":{"gitId":"roshankumar1991"},"content":"            System.out.println(current);","lastModifiedDate":"2022-09-18"},{"lineNumber":56,"author":{"gitId":"roshankumar1991"},"content":"            if (current.contains(\"[T]\")) {","lastModifiedDate":"2022-09-18"},{"lineNumber":57,"author":{"gitId":"roshankumar1991"},"content":"                String description \u003d current.substring(7);","lastModifiedDate":"2022-09-18"},{"lineNumber":58,"author":{"gitId":"roshankumar1991"},"content":"                list.add(new Todo(description));","lastModifiedDate":"2022-09-18"},{"lineNumber":59,"author":{"gitId":"roshankumar1991"},"content":"                if (current.contains(\"\\u2713\")) {","lastModifiedDate":"2022-09-18"},{"lineNumber":60,"author":{"gitId":"roshankumar1991"},"content":"                    list.get(count).setStatus(true);","lastModifiedDate":"2022-09-18"},{"lineNumber":61,"author":{"gitId":"roshankumar1991"},"content":"                }","lastModifiedDate":"2022-09-18"},{"lineNumber":62,"author":{"gitId":"roshankumar1991"},"content":"            }","lastModifiedDate":"2022-09-18"},{"lineNumber":63,"author":{"gitId":"roshankumar1991"},"content":"            else if (current.contains(\"[D]\")) {","lastModifiedDate":"2022-09-18"},{"lineNumber":64,"author":{"gitId":"roshankumar1991"},"content":"                int m \u003d current.indexOf(\"(\");","lastModifiedDate":"2022-09-18"},{"lineNumber":65,"author":{"gitId":"roshankumar1991"},"content":"                int n \u003d current.indexOf(\")\");","lastModifiedDate":"2022-09-18"},{"lineNumber":66,"author":{"gitId":"roshankumar1991"},"content":"                String description \u003d current.substring(7,m-1);","lastModifiedDate":"2022-09-18"},{"lineNumber":67,"author":{"gitId":"roshankumar1991"},"content":"                String by \u003d current.substring(m+5,n);","lastModifiedDate":"2022-09-18"},{"lineNumber":68,"author":{"gitId":"roshankumar1991"},"content":"                list.add(new Deadline(description,by));","lastModifiedDate":"2022-09-18"},{"lineNumber":69,"author":{"gitId":"roshankumar1991"},"content":"                if (current.contains(\"\\u2713\")) {","lastModifiedDate":"2022-09-18"},{"lineNumber":70,"author":{"gitId":"roshankumar1991"},"content":"                    list.get(count).setStatus(true);","lastModifiedDate":"2022-09-18"},{"lineNumber":71,"author":{"gitId":"roshankumar1991"},"content":"                }","lastModifiedDate":"2022-09-18"},{"lineNumber":72,"author":{"gitId":"roshankumar1991"},"content":"            }","lastModifiedDate":"2022-09-18"},{"lineNumber":73,"author":{"gitId":"roshankumar1991"},"content":"            else if (current.contains(\"[E]\")) {","lastModifiedDate":"2022-09-18"},{"lineNumber":74,"author":{"gitId":"roshankumar1991"},"content":"                int m \u003d current.indexOf(\"(\");","lastModifiedDate":"2022-09-18"},{"lineNumber":75,"author":{"gitId":"roshankumar1991"},"content":"                int n \u003d current.indexOf(\")\");","lastModifiedDate":"2022-09-18"},{"lineNumber":76,"author":{"gitId":"roshankumar1991"},"content":"                String description \u003d current.substring(7,m-1);","lastModifiedDate":"2022-09-18"},{"lineNumber":77,"author":{"gitId":"roshankumar1991"},"content":"                String at \u003d current.substring(m+5,n);","lastModifiedDate":"2022-09-18"},{"lineNumber":78,"author":{"gitId":"roshankumar1991"},"content":"                list.add(new Event(description,at));","lastModifiedDate":"2022-09-18"},{"lineNumber":79,"author":{"gitId":"roshankumar1991"},"content":"                if (current.contains(\"\\u2713\")) {","lastModifiedDate":"2022-09-18"},{"lineNumber":80,"author":{"gitId":"roshankumar1991"},"content":"                    list.get(count).setStatus(true);","lastModifiedDate":"2022-09-18"},{"lineNumber":81,"author":{"gitId":"roshankumar1991"},"content":"                }","lastModifiedDate":"2022-09-18"},{"lineNumber":82,"author":{"gitId":"roshankumar1991"},"content":"            }","lastModifiedDate":"2022-09-18"},{"lineNumber":83,"author":{"gitId":"roshankumar1991"},"content":"            else {","lastModifiedDate":"2022-09-18"},{"lineNumber":84,"author":{"gitId":"roshankumar1991"},"content":"                throw new DukeException(\"Error: Task in existing data is incompatible\\n\");","lastModifiedDate":"2022-09-18"},{"lineNumber":85,"author":{"gitId":"roshankumar1991"},"content":"            }","lastModifiedDate":"2022-09-18"},{"lineNumber":86,"author":{"gitId":"roshankumar1991"},"content":"            count++;","lastModifiedDate":"2022-09-18"},{"lineNumber":87,"author":{"gitId":"roshankumar1991"},"content":"        }","lastModifiedDate":"2022-09-18"},{"lineNumber":88,"author":{"gitId":"roshankumar1991"},"content":"    }","lastModifiedDate":"2022-09-18"},{"lineNumber":89,"author":{"gitId":"roshankumar1991"},"content":"","lastModifiedDate":"2022-09-18"},{"lineNumber":90,"author":{"gitId":"roshankumar1991"},"content":"    /**","lastModifiedDate":"2022-09-18"},{"lineNumber":91,"author":{"gitId":"roshankumar1991"},"content":"     * This class registers the user-inputs and sorts what the program supposed to execute and adds the task into the list.","lastModifiedDate":"2022-09-18"},{"lineNumber":92,"author":{"gitId":"roshankumar1991"},"content":"     * \u003cbr\u003e It contains the following approved actions:","lastModifiedDate":"2022-09-18"},{"lineNumber":93,"author":{"gitId":"roshankumar1991"},"content":"     * \u003col\u003e","lastModifiedDate":"2022-09-18"},{"lineNumber":94,"author":{"gitId":"roshankumar1991"},"content":"     *     \u003cli\u003eTodo\u003c/li\u003e","lastModifiedDate":"2022-09-18"},{"lineNumber":95,"author":{"gitId":"roshankumar1991"},"content":"     *     \u003cli\u003eEvent\u003c/li\u003e","lastModifiedDate":"2022-09-18"},{"lineNumber":96,"author":{"gitId":"roshankumar1991"},"content":"     *     \u003cli\u003eDeadline\u003c/li\u003e","lastModifiedDate":"2022-09-18"},{"lineNumber":97,"author":{"gitId":"roshankumar1991"},"content":"     * \u003c/ol\u003e","lastModifiedDate":"2022-09-18"},{"lineNumber":98,"author":{"gitId":"roshankumar1991"},"content":"     * \u003cp\u003e","lastModifiedDate":"2022-09-18"},{"lineNumber":99,"author":{"gitId":"roshankumar1991"},"content":"     * Once it understand what the user-input is referring to, it adds the task into the list.","lastModifiedDate":"2022-09-18"},{"lineNumber":100,"author":{"gitId":"roshankumar1991"},"content":"     */","lastModifiedDate":"2022-09-18"},{"lineNumber":101,"author":{"gitId":"roshankumar1991"},"content":"","lastModifiedDate":"2022-09-18"},{"lineNumber":102,"author":{"gitId":"roshankumar1991"},"content":"    public static void sort(String t) throws DukeException { //classify tasks between todo / deadline / event","lastModifiedDate":"2022-08-28"},{"lineNumber":103,"author":{"gitId":"roshankumar1991"},"content":"        if (t.toLowerCase().contains(\"todo\")) {","lastModifiedDate":"2022-09-18"},{"lineNumber":104,"author":{"gitId":"roshankumar1991"},"content":"            if (t.trim().length() \u003c 5) {","lastModifiedDate":"2022-08-28"},{"lineNumber":105,"author":{"gitId":"roshankumar1991"},"content":"                throw new DukeException(\"Error: Description of task cannot be empty.\\n\");","lastModifiedDate":"2022-08-28"},{"lineNumber":106,"author":{"gitId":"roshankumar1991"},"content":"            }","lastModifiedDate":"2022-08-28"},{"lineNumber":107,"author":{"gitId":"roshankumar1991"},"content":"            int m \u003d t.toLowerCase().indexOf(\"todo\");","lastModifiedDate":"2022-09-18"},{"lineNumber":108,"author":{"gitId":"roshankumar1991"},"content":"            String description \u003d t.substring(m+4).trim();","lastModifiedDate":"2022-09-18"},{"lineNumber":109,"author":{"gitId":"roshankumar1991"},"content":"            for (Task l : list) {","lastModifiedDate":"2022-09-18"},{"lineNumber":110,"author":{"gitId":"roshankumar1991"},"content":"                if (l.description.equals(description)) {","lastModifiedDate":"2022-09-18"},{"lineNumber":111,"author":{"gitId":"roshankumar1991"},"content":"                    throw new DukeException(\"Error: task.Task has already been added previously\\n\");","lastModifiedDate":"2022-09-09"},{"lineNumber":112,"author":{"gitId":"roshankumar1991"},"content":"                }","lastModifiedDate":"2022-08-19"},{"lineNumber":113,"author":{"gitId":"roshankumar1991"},"content":"            }","lastModifiedDate":"2022-08-19"},{"lineNumber":114,"author":{"gitId":"roshankumar1991"},"content":"            list.add(new Todo(description));","lastModifiedDate":"2022-09-18"},{"lineNumber":115,"author":{"gitId":"roshankumar1991"},"content":"        }","lastModifiedDate":"2022-08-19"},{"lineNumber":116,"author":{"gitId":"roshankumar1991"},"content":"        else if (t.toLowerCase().contains(\"deadline\")) {","lastModifiedDate":"2022-09-18"},{"lineNumber":117,"author":{"gitId":"roshankumar1991"},"content":"            if (t.trim().length() \u003c 9) {","lastModifiedDate":"2022-08-28"},{"lineNumber":118,"author":{"gitId":"roshankumar1991"},"content":"                throw new DukeException(\"Error: Description of task cannot be empty.\\n\");","lastModifiedDate":"2022-08-28"},{"lineNumber":119,"author":{"gitId":"roshankumar1991"},"content":"            }","lastModifiedDate":"2022-08-28"},{"lineNumber":120,"author":{"gitId":"roshankumar1991"},"content":"            if (!t.contains(\"/\")) {","lastModifiedDate":"2022-08-28"},{"lineNumber":121,"author":{"gitId":"roshankumar1991"},"content":"                throw new DukeException(\"Error: Please specify time.\\n\");","lastModifiedDate":"2022-08-28"},{"lineNumber":122,"author":{"gitId":"roshankumar1991"},"content":"            }","lastModifiedDate":"2022-08-28"},{"lineNumber":123,"author":{"gitId":"roshankumar1991"},"content":"            int m \u003d t.toLowerCase().indexOf(\"deadline\");","lastModifiedDate":"2022-09-18"},{"lineNumber":124,"author":{"gitId":"roshankumar1991"},"content":"            int n \u003d t.indexOf(\u0027/\u0027);","lastModifiedDate":"2022-08-19"},{"lineNumber":125,"author":{"gitId":"roshankumar1991"},"content":"            String description \u003d t.substring(m+8,n).trim();","lastModifiedDate":"2022-09-18"},{"lineNumber":126,"author":{"gitId":"roshankumar1991"},"content":"            String by \u003d t.substring(n+3).trim();","lastModifiedDate":"2022-09-18"},{"lineNumber":127,"author":{"gitId":"roshankumar1991"},"content":"            for (Task l : list) {","lastModifiedDate":"2022-09-18"},{"lineNumber":128,"author":{"gitId":"roshankumar1991"},"content":"                if (l.description.equals(description)) {","lastModifiedDate":"2022-09-18"},{"lineNumber":129,"author":{"gitId":"roshankumar1991"},"content":"                    throw new DukeException(\"Error: task.Task has already been added previously\\n\");","lastModifiedDate":"2022-09-09"},{"lineNumber":130,"author":{"gitId":"roshankumar1991"},"content":"                }","lastModifiedDate":"2022-08-19"},{"lineNumber":131,"author":{"gitId":"roshankumar1991"},"content":"            }","lastModifiedDate":"2022-08-19"},{"lineNumber":132,"author":{"gitId":"roshankumar1991"},"content":"            list.add(new Deadline(description, by));","lastModifiedDate":"2022-09-18"},{"lineNumber":133,"author":{"gitId":"roshankumar1991"},"content":"        }","lastModifiedDate":"2022-08-19"},{"lineNumber":134,"author":{"gitId":"roshankumar1991"},"content":"        else if (t.toLowerCase().contains(\"event\")) {","lastModifiedDate":"2022-09-18"},{"lineNumber":135,"author":{"gitId":"roshankumar1991"},"content":"            if (t.trim().length() \u003c 6) {","lastModifiedDate":"2022-08-28"},{"lineNumber":136,"author":{"gitId":"roshankumar1991"},"content":"                throw new DukeException(\"Error: Description of task cannot be empty.\\n\");","lastModifiedDate":"2022-08-28"},{"lineNumber":137,"author":{"gitId":"roshankumar1991"},"content":"            }","lastModifiedDate":"2022-08-28"},{"lineNumber":138,"author":{"gitId":"roshankumar1991"},"content":"            if (!t.contains(\"/\")) {","lastModifiedDate":"2022-08-28"},{"lineNumber":139,"author":{"gitId":"roshankumar1991"},"content":"                throw new DukeException(\"Error: Please specify time.\\n\");","lastModifiedDate":"2022-08-28"},{"lineNumber":140,"author":{"gitId":"roshankumar1991"},"content":"            }","lastModifiedDate":"2022-08-28"},{"lineNumber":141,"author":{"gitId":"roshankumar1991"},"content":"            int m \u003d t.toLowerCase().indexOf(\"event\");","lastModifiedDate":"2022-09-18"},{"lineNumber":142,"author":{"gitId":"roshankumar1991"},"content":"            int n \u003d t.indexOf(\u0027/\u0027);","lastModifiedDate":"2022-08-19"},{"lineNumber":143,"author":{"gitId":"roshankumar1991"},"content":"            String description \u003d t.substring(m+5,n).trim();","lastModifiedDate":"2022-09-18"},{"lineNumber":144,"author":{"gitId":"roshankumar1991"},"content":"            String at \u003d t.substring(n+3).trim();","lastModifiedDate":"2022-09-18"},{"lineNumber":145,"author":{"gitId":"roshankumar1991"},"content":"            for (Task l : list) {","lastModifiedDate":"2022-09-18"},{"lineNumber":146,"author":{"gitId":"roshankumar1991"},"content":"                if (l.description.equals(description)) {","lastModifiedDate":"2022-09-18"},{"lineNumber":147,"author":{"gitId":"roshankumar1991"},"content":"                    throw new DukeException(\"Error: task.Task has already been added previously\\n\");","lastModifiedDate":"2022-09-09"},{"lineNumber":148,"author":{"gitId":"roshankumar1991"},"content":"                }","lastModifiedDate":"2022-08-19"},{"lineNumber":149,"author":{"gitId":"roshankumar1991"},"content":"            }","lastModifiedDate":"2022-08-19"},{"lineNumber":150,"author":{"gitId":"roshankumar1991"},"content":"            list.add(new Event(description, at));","lastModifiedDate":"2022-09-18"},{"lineNumber":151,"author":{"gitId":"roshankumar1991"},"content":"        }","lastModifiedDate":"2022-08-19"},{"lineNumber":152,"author":{"gitId":"roshankumar1991"},"content":"        else {","lastModifiedDate":"2022-08-28"},{"lineNumber":153,"author":{"gitId":"roshankumar1991"},"content":"            throw new DukeException(\"Error: task.Task specified must be within the category of \u0027todo\u0027 / \u0027event\u0027 / \u0027deadline\u0027 only \\n\");","lastModifiedDate":"2022-09-09"},{"lineNumber":154,"author":{"gitId":"roshankumar1991"},"content":"        }","lastModifiedDate":"2022-08-28"},{"lineNumber":155,"author":{"gitId":"roshankumar1991"},"content":"    }","lastModifiedDate":"2022-08-19"},{"lineNumber":156,"author":{"gitId":"roshankumar1991"},"content":"","lastModifiedDate":"2022-09-18"},{"lineNumber":157,"author":{"gitId":"roshankumar1991"},"content":"    /**","lastModifiedDate":"2022-09-18"},{"lineNumber":158,"author":{"gitId":"roshankumar1991"},"content":"     * This class registers the user-inputs and makes sense of the command that the program is supposed to execute.","lastModifiedDate":"2022-09-18"},{"lineNumber":159,"author":{"gitId":"roshankumar1991"},"content":"     * \u003cbr\u003e It contains the following approved actions:","lastModifiedDate":"2022-09-18"},{"lineNumber":160,"author":{"gitId":"roshankumar1991"},"content":"     * \u003col\u003e","lastModifiedDate":"2022-09-18"},{"lineNumber":161,"author":{"gitId":"roshankumar1991"},"content":"     *     \u003cli\u003eBye: Exits the Task Manager\u003c/li\u003e","lastModifiedDate":"2022-09-18"},{"lineNumber":162,"author":{"gitId":"roshankumar1991"},"content":"     *     \u003cli\u003eList: Allows to list all the tasks inside TaskList\u003c/li\u003e","lastModifiedDate":"2022-09-18"},{"lineNumber":163,"author":{"gitId":"roshankumar1991"},"content":"     *     \u003cli\u003eUnmark: Marks a task as not completed\u003c/li\u003e","lastModifiedDate":"2022-09-18"},{"lineNumber":164,"author":{"gitId":"roshankumar1991"},"content":"     *     \u003cli\u003eMark: Marks a task as completed\u003c/li\u003e","lastModifiedDate":"2022-09-18"},{"lineNumber":165,"author":{"gitId":"roshankumar1991"},"content":"     *     \u003cli\u003eDelete: Deletes a task from the TaskList\u003c/li\u003e","lastModifiedDate":"2022-09-18"},{"lineNumber":166,"author":{"gitId":"roshankumar1991"},"content":"     * \u003c/ol\u003e","lastModifiedDate":"2022-09-18"},{"lineNumber":167,"author":{"gitId":"roshankumar1991"},"content":"     * \u003cp\u003e","lastModifiedDate":"2022-09-18"},{"lineNumber":168,"author":{"gitId":"roshankumar1991"},"content":"     * Once it understand what the user-input is referring to, it passes the appropriate command to the TaskList for execution.","lastModifiedDate":"2022-09-18"},{"lineNumber":169,"author":{"gitId":"roshankumar1991"},"content":"     */","lastModifiedDate":"2022-09-18"},{"lineNumber":170,"author":{"gitId":"roshankumar1991"},"content":"","lastModifiedDate":"2022-09-18"},{"lineNumber":171,"author":{"gitId":"roshankumar1991"},"content":"    public static void echo() throws DukeException { //classify commands such as bye / list / unmark / mark / add tasks","lastModifiedDate":"2022-08-28"},{"lineNumber":172,"author":{"gitId":"roshankumar1991"},"content":"        Scanner in \u003d new Scanner(System.in);","lastModifiedDate":"2022-08-19"},{"lineNumber":173,"author":{"gitId":"roshankumar1991"},"content":"        String line \u003d in.nextLine();","lastModifiedDate":"2022-09-18"},{"lineNumber":174,"author":{"gitId":"roshankumar1991"},"content":"","lastModifiedDate":"2022-08-19"},{"lineNumber":175,"author":{"gitId":"roshankumar1991"},"content":"        if (line.trim().equalsIgnoreCase(\"bye\")) {                                              //Switch Case - Bye","lastModifiedDate":"2022-09-18"},{"lineNumber":176,"author":{"gitId":"roshankumar1991"},"content":"            System.out.println(\"Bye. Hope to see you again soon!\");","lastModifiedDate":"2022-08-19"},{"lineNumber":177,"author":{"gitId":"roshankumar1991"},"content":"            System.exit(0);","lastModifiedDate":"2022-08-19"},{"lineNumber":178,"author":{"gitId":"roshankumar1991"},"content":"        }","lastModifiedDate":"2022-08-19"},{"lineNumber":179,"author":{"gitId":"roshankumar1991"},"content":"        else if (line.trim().equalsIgnoreCase(\"list\")) {","lastModifiedDate":"2022-09-18"},{"lineNumber":180,"author":{"gitId":"roshankumar1991"},"content":"            if (count \u003d\u003d 0) {","lastModifiedDate":"2022-09-18"},{"lineNumber":181,"author":{"gitId":"roshankumar1991"},"content":"                throw new DukeException(\"There are no items currently in the list\\n\");","lastModifiedDate":"2022-09-18"},{"lineNumber":182,"author":{"gitId":"roshankumar1991"},"content":"            }                                          //Switch Case - List","lastModifiedDate":"2022-09-18"},{"lineNumber":183,"author":{"gitId":"roshankumar1991"},"content":"            System.out.println(\"Here are the tasks in your list:\\n\");","lastModifiedDate":"2022-08-19"},{"lineNumber":184,"author":{"gitId":"roshankumar1991"},"content":"            int seq \u003d 1;","lastModifiedDate":"2022-09-18"},{"lineNumber":185,"author":{"gitId":"roshankumar1991"},"content":"            for (Task l : list) {","lastModifiedDate":"2022-09-18"},{"lineNumber":186,"author":{"gitId":"roshankumar1991"},"content":"                System.out.println(seq + \". \" + l);","lastModifiedDate":"2022-09-18"},{"lineNumber":187,"author":{"gitId":"roshankumar1991"},"content":"                seq++;","lastModifiedDate":"2022-08-19"},{"lineNumber":188,"author":{"gitId":"roshankumar1991"},"content":"            }","lastModifiedDate":"2022-08-19"},{"lineNumber":189,"author":{"gitId":"roshankumar1991"},"content":"            trigger \u003d false;","lastModifiedDate":"2022-09-18"},{"lineNumber":190,"author":{"gitId":"roshankumar1991"},"content":"        }","lastModifiedDate":"2022-08-19"},{"lineNumber":191,"author":{"gitId":"roshankumar1991"},"content":"        else if (line.toLowerCase().contains(\"unmark\")) {                                        //Switch Case - Unmark","lastModifiedDate":"2022-09-18"},{"lineNumber":192,"author":{"gitId":"roshankumar1991"},"content":"            int m \u003d line.toLowerCase().indexOf(\"unmark\");","lastModifiedDate":"2022-09-18"},{"lineNumber":193,"author":{"gitId":"roshankumar1991"},"content":"            String num \u003d line.substring(m+4).trim();","lastModifiedDate":"2022-09-18"},{"lineNumber":194,"author":{"gitId":"roshankumar1991"},"content":"            if (num.length() \u003c 1) {","lastModifiedDate":"2022-09-18"},{"lineNumber":195,"author":{"gitId":"roshankumar1991"},"content":"                throw new DukeException(\"Error: Please enter which task to unmark\\n\");","lastModifiedDate":"2022-08-28"},{"lineNumber":196,"author":{"gitId":"roshankumar1991"},"content":"            }","lastModifiedDate":"2022-08-19"},{"lineNumber":197,"author":{"gitId":"roshankumar1991"},"content":"            int n \u003d Integer.parseInt(num);","lastModifiedDate":"2022-09-18"},{"lineNumber":198,"author":{"gitId":"roshankumar1991"},"content":"            if (n \u003e count) throw new DukeException(\"Error: Please enter a valid task number\\n\");","lastModifiedDate":"2022-08-28"},{"lineNumber":199,"author":{"gitId":"roshankumar1991"},"content":"            if (list.get(n-1).getStatusIcon().equals(\" \")) {","lastModifiedDate":"2022-09-18"},{"lineNumber":200,"author":{"gitId":"roshankumar1991"},"content":"                throw new DukeException(\"Error: task.Task has already been unmarked\\n\");","lastModifiedDate":"2022-09-09"},{"lineNumber":201,"author":{"gitId":"roshankumar1991"},"content":"            }","lastModifiedDate":"2022-08-19"},{"lineNumber":202,"author":{"gitId":"roshankumar1991"},"content":"            else {","lastModifiedDate":"2022-08-19"},{"lineNumber":203,"author":{"gitId":"roshankumar1991"},"content":"                System.out.println(\"OK, I\u0027ve marked this task as not done yet:\");","lastModifiedDate":"2022-08-19"},{"lineNumber":204,"author":{"gitId":"roshankumar1991"},"content":"                list.get(n-1).setStatus(false);","lastModifiedDate":"2022-09-18"},{"lineNumber":205,"author":{"gitId":"roshankumar1991"},"content":"            }","lastModifiedDate":"2022-08-19"},{"lineNumber":206,"author":{"gitId":"roshankumar1991"},"content":"            System.out.println(list.get(n-1) + \"\\n\");","lastModifiedDate":"2022-09-18"},{"lineNumber":207,"author":{"gitId":"roshankumar1991"},"content":"            echo();","lastModifiedDate":"2022-08-19"},{"lineNumber":208,"author":{"gitId":"roshankumar1991"},"content":"        }","lastModifiedDate":"2022-08-19"},{"lineNumber":209,"author":{"gitId":"roshankumar1991"},"content":"        else if (line.toLowerCase().contains(\"mark\")) {                                      //Switch Case - Mark","lastModifiedDate":"2022-09-18"},{"lineNumber":210,"author":{"gitId":"roshankumar1991"},"content":"            int m \u003d line.toLowerCase().indexOf(\"mark\");","lastModifiedDate":"2022-09-18"},{"lineNumber":211,"author":{"gitId":"roshankumar1991"},"content":"            String num \u003d line.substring(m+4).trim();","lastModifiedDate":"2022-09-18"},{"lineNumber":212,"author":{"gitId":"roshankumar1991"},"content":"            if (num.length() \u003c 1) {","lastModifiedDate":"2022-09-18"},{"lineNumber":213,"author":{"gitId":"roshankumar1991"},"content":"                throw new DukeException(\"Error: Please enter which task is done\\n\");","lastModifiedDate":"2022-08-28"},{"lineNumber":214,"author":{"gitId":"roshankumar1991"},"content":"            }","lastModifiedDate":"2022-08-19"},{"lineNumber":215,"author":{"gitId":"roshankumar1991"},"content":"            int n \u003d Integer.parseInt(num);","lastModifiedDate":"2022-09-18"},{"lineNumber":216,"author":{"gitId":"roshankumar1991"},"content":"            if (n \u003e count) {","lastModifiedDate":"2022-08-19"},{"lineNumber":217,"author":{"gitId":"roshankumar1991"},"content":"                throw new DukeException(\"Error: Please enter a valid task number\\n\");","lastModifiedDate":"2022-08-28"},{"lineNumber":218,"author":{"gitId":"roshankumar1991"},"content":"            }","lastModifiedDate":"2022-08-19"},{"lineNumber":219,"author":{"gitId":"roshankumar1991"},"content":"            if (list.get(n-1).getStatusIcon().equals(\"X\")) {","lastModifiedDate":"2022-09-18"},{"lineNumber":220,"author":{"gitId":"roshankumar1991"},"content":"                throw new DukeException(\"Error: task.Task has already been marked\\n\");","lastModifiedDate":"2022-09-09"},{"lineNumber":221,"author":{"gitId":"roshankumar1991"},"content":"            }","lastModifiedDate":"2022-08-19"},{"lineNumber":222,"author":{"gitId":"roshankumar1991"},"content":"            else {","lastModifiedDate":"2022-08-19"},{"lineNumber":223,"author":{"gitId":"roshankumar1991"},"content":"                System.out.println(\"Nice! I\u0027ve marked this task as done:\");","lastModifiedDate":"2022-08-19"},{"lineNumber":224,"author":{"gitId":"roshankumar1991"},"content":"                list.get(n-1).setStatus(true);","lastModifiedDate":"2022-09-18"},{"lineNumber":225,"author":{"gitId":"roshankumar1991"},"content":"            }","lastModifiedDate":"2022-08-19"},{"lineNumber":226,"author":{"gitId":"roshankumar1991"},"content":"            System.out.println(list.get(n-1) + \"\\n\");","lastModifiedDate":"2022-09-18"},{"lineNumber":227,"author":{"gitId":"roshankumar1991"},"content":"            echo();","lastModifiedDate":"2022-08-19"},{"lineNumber":228,"author":{"gitId":"roshankumar1991"},"content":"        }","lastModifiedDate":"2022-08-19"},{"lineNumber":229,"author":{"gitId":"roshankumar1991"},"content":"        else if (line.toLowerCase().contains(\"delete\")) {","lastModifiedDate":"2022-09-18"},{"lineNumber":230,"author":{"gitId":"roshankumar1991"},"content":"            int m \u003d line.toLowerCase().indexOf(\"delete\");","lastModifiedDate":"2022-09-18"},{"lineNumber":231,"author":{"gitId":"roshankumar1991"},"content":"            String num \u003d line.substring(m+6).trim();","lastModifiedDate":"2022-09-18"},{"lineNumber":232,"author":{"gitId":"roshankumar1991"},"content":"            if (num.length() \u003c 1) {","lastModifiedDate":"2022-09-18"},{"lineNumber":233,"author":{"gitId":"roshankumar1991"},"content":"                throw new DukeException(\"Error: Please enter which task to be deleted\\n\");","lastModifiedDate":"2022-09-18"},{"lineNumber":234,"author":{"gitId":"roshankumar1991"},"content":"            }","lastModifiedDate":"2022-09-18"},{"lineNumber":235,"author":{"gitId":"roshankumar1991"},"content":"            int n \u003d Integer.parseInt(num);","lastModifiedDate":"2022-09-18"},{"lineNumber":236,"author":{"gitId":"roshankumar1991"},"content":"            if (n \u003e count) {","lastModifiedDate":"2022-09-18"},{"lineNumber":237,"author":{"gitId":"roshankumar1991"},"content":"                throw new DukeException(\"Error: Please enter a valid task number\\n\");","lastModifiedDate":"2022-09-18"},{"lineNumber":238,"author":{"gitId":"roshankumar1991"},"content":"            }","lastModifiedDate":"2022-09-18"},{"lineNumber":239,"author":{"gitId":"roshankumar1991"},"content":"            else {","lastModifiedDate":"2022-09-18"},{"lineNumber":240,"author":{"gitId":"roshankumar1991"},"content":"                System.out.println(\"Noted. I\u0027ve removed this task:\");","lastModifiedDate":"2022-09-18"},{"lineNumber":241,"author":{"gitId":"roshankumar1991"},"content":"                System.out.println(list.get(n-1));","lastModifiedDate":"2022-09-18"},{"lineNumber":242,"author":{"gitId":"roshankumar1991"},"content":"                list.remove(n-1);","lastModifiedDate":"2022-09-18"},{"lineNumber":243,"author":{"gitId":"roshankumar1991"},"content":"                count--;","lastModifiedDate":"2022-09-18"},{"lineNumber":244,"author":{"gitId":"roshankumar1991"},"content":"                System.out.println(\"Now you have \" + count + \" tasks in the list.\\n\");","lastModifiedDate":"2022-09-18"},{"lineNumber":245,"author":{"gitId":"roshankumar1991"},"content":"            }","lastModifiedDate":"2022-09-18"},{"lineNumber":246,"author":{"gitId":"roshankumar1991"},"content":"        }","lastModifiedDate":"2022-09-18"},{"lineNumber":247,"author":{"gitId":"roshankumar1991"},"content":"        else {                                                                  //Switch Case - Add task","lastModifiedDate":"2022-08-28"},{"lineNumber":248,"author":{"gitId":"roshankumar1991"},"content":"            sort(line);","lastModifiedDate":"2022-08-19"},{"lineNumber":249,"author":{"gitId":"roshankumar1991"},"content":"            System.out.println(\"Got it. I\u0027ve added this task:\");","lastModifiedDate":"2022-08-19"},{"lineNumber":250,"author":{"gitId":"roshankumar1991"},"content":"            System.out.println(list.get(count));","lastModifiedDate":"2022-09-18"},{"lineNumber":251,"author":{"gitId":"roshankumar1991"},"content":"            count++;","lastModifiedDate":"2022-08-19"},{"lineNumber":252,"author":{"gitId":"roshankumar1991"},"content":"            System.out.println(\"Now you have \" + count + \" tasks in the list.\\n\");","lastModifiedDate":"2022-08-19"},{"lineNumber":253,"author":{"gitId":"roshankumar1991"},"content":"        }","lastModifiedDate":"2022-08-19"},{"lineNumber":254,"author":{"gitId":"roshankumar1991"},"content":"    }","lastModifiedDate":"2022-08-19"},{"lineNumber":255,"author":{"gitId":"roshankumar1991"},"content":"        public static void main(String[] args) {","lastModifiedDate":"2022-09-18"},{"lineNumber":256,"author":{"gitId":"roshankumar1991"},"content":"            System.out.println(\"Hello! I\u0027m Duke\\n\" + \"Let me load the existing data for you (if any)\\n\");","lastModifiedDate":"2022-09-18"},{"lineNumber":257,"author":{"gitId":"roshankumar1991"},"content":"            String FileLocation \u003d \"data/duke.txt\";","lastModifiedDate":"2022-09-18"},{"lineNumber":258,"author":{"gitId":"roshankumar1991"},"content":"            String Directory \u003d \"./data/\";","lastModifiedDate":"2022-09-18"},{"lineNumber":259,"author":{"gitId":"roshankumar1991"},"content":"            try {","lastModifiedDate":"2022-09-18"},{"lineNumber":260,"author":{"gitId":"roshankumar1991"},"content":"                Path path \u003d Paths.get(Directory);","lastModifiedDate":"2022-09-18"},{"lineNumber":261,"author":{"gitId":"roshankumar1991"},"content":"                Files.createDirectories(path);","lastModifiedDate":"2022-09-18"},{"lineNumber":262,"author":{"gitId":"roshankumar1991"},"content":"                printFileContents(FileLocation);","lastModifiedDate":"2022-09-18"},{"lineNumber":263,"author":{"gitId":"roshankumar1991"},"content":"            } catch (DukeException e) {","lastModifiedDate":"2022-09-18"},{"lineNumber":264,"author":{"gitId":"roshankumar1991"},"content":"                System.out.println(e.getMessage());","lastModifiedDate":"2022-09-18"},{"lineNumber":265,"author":{"gitId":"roshankumar1991"},"content":"                trigger \u003d true;","lastModifiedDate":"2022-09-18"},{"lineNumber":266,"author":{"gitId":"roshankumar1991"},"content":"            } catch (IOException e) {","lastModifiedDate":"2022-09-18"},{"lineNumber":267,"author":{"gitId":"roshankumar1991"},"content":"                System.out.println(e.getMessage());","lastModifiedDate":"2022-09-18"},{"lineNumber":268,"author":{"gitId":"roshankumar1991"},"content":"            }","lastModifiedDate":"2022-09-18"},{"lineNumber":269,"author":{"gitId":"roshankumar1991"},"content":"            System.out.println(\"What would you like to do ?\");","lastModifiedDate":"2022-09-18"},{"lineNumber":270,"author":{"gitId":"roshankumar1991"},"content":"","lastModifiedDate":"2022-08-19"},{"lineNumber":271,"author":{"gitId":"roshankumar1991"},"content":"    /**","lastModifiedDate":"2022-09-18"},{"lineNumber":272,"author":{"gitId":"roshankumar1991"},"content":"     * This method starts the interaction with the user and asks to provide for a user-input so that it can scan the input and provide it to another class for execution purposes.","lastModifiedDate":"2022-09-18"},{"lineNumber":273,"author":{"gitId":"roshankumar1991"},"content":"     * @throws DukeException Error that is thrown if user inputs an incompatible command.","lastModifiedDate":"2022-09-18"},{"lineNumber":274,"author":{"gitId":"roshankumar1991"},"content":"     */","lastModifiedDate":"2022-09-18"},{"lineNumber":275,"author":{"gitId":"roshankumar1991"},"content":"    public static void main(String[] args) throws DukeException {","lastModifiedDate":"2022-08-28"},{"lineNumber":276,"author":{"gitId":"roshankumar1991"},"content":"        String greet \u003d \"Hello! I\u0027m command.Duke\\n\" + \"What can I do for you?\\n\";","lastModifiedDate":"2022-09-09"},{"lineNumber":277,"author":{"gitId":"roshankumar1991"},"content":"        System.out.println(greet);","lastModifiedDate":"2022-08-19"},{"lineNumber":278,"author":{"gitId":"roshankumar1991"},"content":"        while(true) {","lastModifiedDate":"2022-08-28"},{"lineNumber":279,"author":{"gitId":"roshankumar1991"},"content":"            try {","lastModifiedDate":"2022-08-28"},{"lineNumber":280,"author":{"gitId":"roshankumar1991"},"content":"                echo(); //push into loop echo()","lastModifiedDate":"2022-09-18"},{"lineNumber":281,"author":{"gitId":"roshankumar1991"},"content":"                if (trigger) {","lastModifiedDate":"2022-09-18"},{"lineNumber":282,"author":{"gitId":"roshankumar1991"},"content":"                    writeToFile(FileLocation); //only make changes when task list changes","lastModifiedDate":"2022-09-18"},{"lineNumber":283,"author":{"gitId":"roshankumar1991"},"content":"                }","lastModifiedDate":"2022-09-18"},{"lineNumber":284,"author":{"gitId":"roshankumar1991"},"content":"                trigger \u003d true;","lastModifiedDate":"2022-09-18"},{"lineNumber":285,"author":{"gitId":"roshankumar1991"},"content":"            } catch (DukeException e) {","lastModifiedDate":"2022-08-28"},{"lineNumber":286,"author":{"gitId":"roshankumar1991"},"content":"                System.out.println(e.getMessage());","lastModifiedDate":"2022-08-28"},{"lineNumber":287,"author":{"gitId":"roshankumar1991"},"content":"                trigger \u003d true;","lastModifiedDate":"2022-09-18"},{"lineNumber":288,"author":{"gitId":"roshankumar1991"},"content":"            }catch (IOException e) {","lastModifiedDate":"2022-09-18"},{"lineNumber":289,"author":{"gitId":"roshankumar1991"},"content":"                System.out.println(\"Something went wrong: \" + e.getMessage());","lastModifiedDate":"2022-09-18"},{"lineNumber":290,"author":{"gitId":"roshankumar1991"},"content":"            }","lastModifiedDate":"2022-08-28"},{"lineNumber":291,"author":{"gitId":"roshankumar1991"},"content":"        }","lastModifiedDate":"2022-08-28"},{"lineNumber":292,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-07-29"},{"lineNumber":293,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"-":3,"roshankumar1991":290}},{"path":"src/main/java/command/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"roshankumar1991"},"content":"package command;","lastModifiedDate":"2022-09-09"},{"lineNumber":2,"author":{"gitId":"roshankumar1991"},"content":"","lastModifiedDate":"2022-09-09"},{"lineNumber":3,"author":{"gitId":"roshankumar1991"},"content":"/**","lastModifiedDate":"2022-09-18"},{"lineNumber":4,"author":{"gitId":"roshankumar1991"},"content":" * This class is to provide for a customized Error message that is usually thrown when an incompatible user-input is provided.","lastModifiedDate":"2022-09-18"},{"lineNumber":5,"author":{"gitId":"roshankumar1991"},"content":" */","lastModifiedDate":"2022-09-18"},{"lineNumber":6,"author":{"gitId":"roshankumar1991"},"content":"","lastModifiedDate":"2022-09-18"},{"lineNumber":7,"author":{"gitId":"roshankumar1991"},"content":"public class DukeException extends Exception{","lastModifiedDate":"2022-08-28"},{"lineNumber":8,"author":{"gitId":"roshankumar1991"},"content":"    public DukeException(String message) {","lastModifiedDate":"2022-08-28"},{"lineNumber":9,"author":{"gitId":"roshankumar1991"},"content":"        super(message);","lastModifiedDate":"2022-08-28"},{"lineNumber":10,"author":{"gitId":"roshankumar1991"},"content":"    }","lastModifiedDate":"2022-08-28"},{"lineNumber":11,"author":{"gitId":"roshankumar1991"},"content":"    boolean trigger \u003d false;","lastModifiedDate":"2022-09-18"},{"lineNumber":12,"author":{"gitId":"roshankumar1991"},"content":"}","lastModifiedDate":"2022-08-28"}],"authorContributionMap":{"roshankumar1991":12}},{"path":"src/main/java/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"roshankumar1991"},"content":"package task;","lastModifiedDate":"2022-09-09"},{"lineNumber":2,"author":{"gitId":"roshankumar1991"},"content":"","lastModifiedDate":"2022-09-09"},{"lineNumber":3,"author":{"gitId":"roshankumar1991"},"content":"/**","lastModifiedDate":"2022-09-18"},{"lineNumber":4,"author":{"gitId":"roshankumar1991"},"content":" * This program is a child of the Task program. It helps add a classification to the Task program.","lastModifiedDate":"2022-09-18"},{"lineNumber":5,"author":{"gitId":"roshankumar1991"},"content":" * \u003cbr\u003eThis form of program includes a task that includes both a description and its associated completion date.","lastModifiedDate":"2022-09-18"},{"lineNumber":6,"author":{"gitId":"roshankumar1991"},"content":" */","lastModifiedDate":"2022-09-18"},{"lineNumber":7,"author":{"gitId":"roshankumar1991"},"content":"","lastModifiedDate":"2022-09-18"},{"lineNumber":8,"author":{"gitId":"roshankumar1991"},"content":"public class Deadline extends Task {","lastModifiedDate":"2022-08-19"},{"lineNumber":9,"author":{"gitId":"roshankumar1991"},"content":"    protected String by;","lastModifiedDate":"2022-08-19"},{"lineNumber":10,"author":{"gitId":"roshankumar1991"},"content":"","lastModifiedDate":"2022-08-19"},{"lineNumber":11,"author":{"gitId":"roshankumar1991"},"content":"    /**","lastModifiedDate":"2022-09-18"},{"lineNumber":12,"author":{"gitId":"roshankumar1991"},"content":"     * This method initialized a deadline task that takes in 2 parameters and creates the task.","lastModifiedDate":"2022-09-18"},{"lineNumber":13,"author":{"gitId":"roshankumar1991"},"content":"     * @param description Description of task","lastModifiedDate":"2022-09-18"},{"lineNumber":14,"author":{"gitId":"roshankumar1991"},"content":"     */","lastModifiedDate":"2022-09-18"},{"lineNumber":15,"author":{"gitId":"roshankumar1991"},"content":"","lastModifiedDate":"2022-09-18"},{"lineNumber":16,"author":{"gitId":"roshankumar1991"},"content":"    public Deadline(String description, String by) {","lastModifiedDate":"2022-08-19"},{"lineNumber":17,"author":{"gitId":"roshankumar1991"},"content":"        super(description);","lastModifiedDate":"2022-08-19"},{"lineNumber":18,"author":{"gitId":"roshankumar1991"},"content":"        this.by \u003d by;","lastModifiedDate":"2022-08-19"},{"lineNumber":19,"author":{"gitId":"roshankumar1991"},"content":"    }","lastModifiedDate":"2022-08-19"},{"lineNumber":20,"author":{"gitId":"roshankumar1991"},"content":"","lastModifiedDate":"2022-08-19"},{"lineNumber":21,"author":{"gitId":"roshankumar1991"},"content":"    /**","lastModifiedDate":"2022-09-18"},{"lineNumber":22,"author":{"gitId":"roshankumar1991"},"content":"     * This method provides a String format return for the event task.","lastModifiedDate":"2022-09-18"},{"lineNumber":23,"author":{"gitId":"roshankumar1991"},"content":"     * @return Returns a String in the unique format specified in the method.","lastModifiedDate":"2022-09-18"},{"lineNumber":24,"author":{"gitId":"roshankumar1991"},"content":"     */","lastModifiedDate":"2022-09-18"},{"lineNumber":25,"author":{"gitId":"roshankumar1991"},"content":"","lastModifiedDate":"2022-09-18"},{"lineNumber":26,"author":{"gitId":"roshankumar1991"},"content":"    @Override","lastModifiedDate":"2022-08-19"},{"lineNumber":27,"author":{"gitId":"roshankumar1991"},"content":"    public String toString() {","lastModifiedDate":"2022-08-19"},{"lineNumber":28,"author":{"gitId":"roshankumar1991"},"content":"        return \"[D]\" + \"[\" + getStatusIcon() + \"] \" + getDescription() + \" (by: \" + by + \")\";","lastModifiedDate":"2022-09-09"},{"lineNumber":29,"author":{"gitId":"roshankumar1991"},"content":"    }","lastModifiedDate":"2022-08-19"},{"lineNumber":30,"author":{"gitId":"roshankumar1991"},"content":"}","lastModifiedDate":"2022-08-19"},{"lineNumber":31,"author":{"gitId":"roshankumar1991"},"content":"","lastModifiedDate":"2022-08-19"}],"authorContributionMap":{"roshankumar1991":31}},{"path":"src/main/java/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"roshankumar1991"},"content":"package task;","lastModifiedDate":"2022-09-09"},{"lineNumber":2,"author":{"gitId":"roshankumar1991"},"content":"","lastModifiedDate":"2022-09-09"},{"lineNumber":3,"author":{"gitId":"roshankumar1991"},"content":"/**","lastModifiedDate":"2022-09-18"},{"lineNumber":4,"author":{"gitId":"roshankumar1991"},"content":" * This program is a child of the Task program. It helps add a classification to the Task program.","lastModifiedDate":"2022-09-18"},{"lineNumber":5,"author":{"gitId":"roshankumar1991"},"content":" * \u003cbr\u003eThis form of program includes a task that includes both a description and its associated completion date.","lastModifiedDate":"2022-09-18"},{"lineNumber":6,"author":{"gitId":"roshankumar1991"},"content":" */","lastModifiedDate":"2022-09-18"},{"lineNumber":7,"author":{"gitId":"roshankumar1991"},"content":"","lastModifiedDate":"2022-09-18"},{"lineNumber":8,"author":{"gitId":"roshankumar1991"},"content":"public class Event extends Task {","lastModifiedDate":"2022-08-19"},{"lineNumber":9,"author":{"gitId":"roshankumar1991"},"content":"    protected String at;","lastModifiedDate":"2022-08-19"},{"lineNumber":10,"author":{"gitId":"roshankumar1991"},"content":"","lastModifiedDate":"2022-08-19"},{"lineNumber":11,"author":{"gitId":"roshankumar1991"},"content":"    /**","lastModifiedDate":"2022-09-18"},{"lineNumber":12,"author":{"gitId":"roshankumar1991"},"content":"     * This method initialized an event task that takes in 2 parameters and creates the task.","lastModifiedDate":"2022-09-18"},{"lineNumber":13,"author":{"gitId":"roshankumar1991"},"content":"     * @param description Description of task","lastModifiedDate":"2022-09-18"},{"lineNumber":14,"author":{"gitId":"roshankumar1991"},"content":"     */","lastModifiedDate":"2022-09-18"},{"lineNumber":15,"author":{"gitId":"roshankumar1991"},"content":"","lastModifiedDate":"2022-09-18"},{"lineNumber":16,"author":{"gitId":"roshankumar1991"},"content":"    public Event(String description, String at) {","lastModifiedDate":"2022-08-19"},{"lineNumber":17,"author":{"gitId":"roshankumar1991"},"content":"        super(description);","lastModifiedDate":"2022-08-19"},{"lineNumber":18,"author":{"gitId":"roshankumar1991"},"content":"        this.at \u003d at;","lastModifiedDate":"2022-08-19"},{"lineNumber":19,"author":{"gitId":"roshankumar1991"},"content":"    }","lastModifiedDate":"2022-08-19"},{"lineNumber":20,"author":{"gitId":"roshankumar1991"},"content":"","lastModifiedDate":"2022-08-19"},{"lineNumber":21,"author":{"gitId":"roshankumar1991"},"content":"    /**","lastModifiedDate":"2022-09-18"},{"lineNumber":22,"author":{"gitId":"roshankumar1991"},"content":"     * This method provides a String format return for the event task.","lastModifiedDate":"2022-09-18"},{"lineNumber":23,"author":{"gitId":"roshankumar1991"},"content":"     * @return Returns a String in the unique format specified in the method.","lastModifiedDate":"2022-09-18"},{"lineNumber":24,"author":{"gitId":"roshankumar1991"},"content":"     */","lastModifiedDate":"2022-09-18"},{"lineNumber":25,"author":{"gitId":"roshankumar1991"},"content":"","lastModifiedDate":"2022-09-18"},{"lineNumber":26,"author":{"gitId":"roshankumar1991"},"content":"    @Override","lastModifiedDate":"2022-08-19"},{"lineNumber":27,"author":{"gitId":"roshankumar1991"},"content":"    public String toString() {","lastModifiedDate":"2022-08-19"},{"lineNumber":28,"author":{"gitId":"roshankumar1991"},"content":"        return \"[E]\" + \"[\" + getStatusIcon() + \"] \" + getDescription() + \" (at: \" + at + \")\";","lastModifiedDate":"2022-09-09"},{"lineNumber":29,"author":{"gitId":"roshankumar1991"},"content":"    }","lastModifiedDate":"2022-08-19"},{"lineNumber":30,"author":{"gitId":"roshankumar1991"},"content":"}","lastModifiedDate":"2022-08-19"}],"authorContributionMap":{"roshankumar1991":30}},{"path":"src/main/java/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"roshankumar1991"},"content":"package task;","lastModifiedDate":"2022-09-09"},{"lineNumber":2,"author":{"gitId":"roshankumar1991"},"content":"","lastModifiedDate":"2022-09-09"},{"lineNumber":3,"author":{"gitId":"roshankumar1991"},"content":"/**","lastModifiedDate":"2022-09-18"},{"lineNumber":4,"author":{"gitId":"roshankumar1991"},"content":" * This Task program defines the basic structure for a Task class. It contains the following key components:","lastModifiedDate":"2022-09-18"},{"lineNumber":5,"author":{"gitId":"roshankumar1991"},"content":" *  1. Description","lastModifiedDate":"2022-09-18"},{"lineNumber":6,"author":{"gitId":"roshankumar1991"},"content":" *  2. isDone Status (Whether task is completed / not completed)","lastModifiedDate":"2022-09-18"},{"lineNumber":7,"author":{"gitId":"roshankumar1991"},"content":" * It also contains the basic constructor, a getter and a setter method.","lastModifiedDate":"2022-09-18"},{"lineNumber":8,"author":{"gitId":"roshankumar1991"},"content":" */","lastModifiedDate":"2022-09-18"},{"lineNumber":9,"author":{"gitId":"roshankumar1991"},"content":"","lastModifiedDate":"2022-09-18"},{"lineNumber":10,"author":{"gitId":"roshankumar1991"},"content":"public abstract class Task {","lastModifiedDate":"2022-09-09"},{"lineNumber":11,"author":{"gitId":"roshankumar1991"},"content":"    public String description;","lastModifiedDate":"2022-09-09"},{"lineNumber":12,"author":{"gitId":"roshankumar1991"},"content":"    protected boolean isDone;","lastModifiedDate":"2022-08-19"},{"lineNumber":13,"author":{"gitId":"roshankumar1991"},"content":"","lastModifiedDate":"2022-08-19"},{"lineNumber":14,"author":{"gitId":"roshankumar1991"},"content":"    /**","lastModifiedDate":"2022-09-18"},{"lineNumber":15,"author":{"gitId":"roshankumar1991"},"content":"     * This method is used to initialize the Task Class using a String description as a variable.","lastModifiedDate":"2022-09-18"},{"lineNumber":16,"author":{"gitId":"roshankumar1991"},"content":"     * @param description Registers the description of the Task.","lastModifiedDate":"2022-09-18"},{"lineNumber":17,"author":{"gitId":"roshankumar1991"},"content":"     */","lastModifiedDate":"2022-09-18"},{"lineNumber":18,"author":{"gitId":"roshankumar1991"},"content":"","lastModifiedDate":"2022-09-18"},{"lineNumber":19,"author":{"gitId":"roshankumar1991"},"content":"    public Task(String description) {","lastModifiedDate":"2022-08-19"},{"lineNumber":20,"author":{"gitId":"roshankumar1991"},"content":"        this.description \u003d description;","lastModifiedDate":"2022-08-19"},{"lineNumber":21,"author":{"gitId":"roshankumar1991"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2022-08-19"},{"lineNumber":22,"author":{"gitId":"roshankumar1991"},"content":"    }","lastModifiedDate":"2022-08-19"},{"lineNumber":23,"author":{"gitId":"roshankumar1991"},"content":"","lastModifiedDate":"2022-08-19"},{"lineNumber":24,"author":{"gitId":"roshankumar1991"},"content":"    /**","lastModifiedDate":"2022-09-18"},{"lineNumber":25,"author":{"gitId":"roshankumar1991"},"content":"     * This method is used to retrieve the status of a task (Completed / Not completed).","lastModifiedDate":"2022-09-18"},{"lineNumber":26,"author":{"gitId":"roshankumar1991"},"content":"     * @return Returns either an X or blank symbol representing the task completion status.","lastModifiedDate":"2022-09-18"},{"lineNumber":27,"author":{"gitId":"roshankumar1991"},"content":"     */","lastModifiedDate":"2022-09-18"},{"lineNumber":28,"author":{"gitId":"roshankumar1991"},"content":"","lastModifiedDate":"2022-09-18"},{"lineNumber":29,"author":{"gitId":"roshankumar1991"},"content":"    public String getStatusIcon() {","lastModifiedDate":"2022-08-19"},{"lineNumber":30,"author":{"gitId":"roshankumar1991"},"content":"","lastModifiedDate":"2022-09-18"},{"lineNumber":31,"author":{"gitId":"roshankumar1991"},"content":"        return (isDone ? \"X\" : \" \"); //return X or blank symbols","lastModifiedDate":"2022-08-19"},{"lineNumber":32,"author":{"gitId":"roshankumar1991"},"content":"    }","lastModifiedDate":"2022-08-19"},{"lineNumber":33,"author":{"gitId":"roshankumar1991"},"content":"    /**","lastModifiedDate":"2022-09-18"},{"lineNumber":34,"author":{"gitId":"roshankumar1991"},"content":"     * This method is used to get the description of a task","lastModifiedDate":"2022-09-18"},{"lineNumber":35,"author":{"gitId":"roshankumar1991"},"content":"     * * @return Returns description of task","lastModifiedDate":"2022-09-18"},{"lineNumber":36,"author":{"gitId":"roshankumar1991"},"content":"     */","lastModifiedDate":"2022-09-18"},{"lineNumber":37,"author":{"gitId":"roshankumar1991"},"content":"","lastModifiedDate":"2022-08-19"},{"lineNumber":38,"author":{"gitId":"roshankumar1991"},"content":"    public String getDescription() {","lastModifiedDate":"2022-09-09"},{"lineNumber":39,"author":{"gitId":"roshankumar1991"},"content":"        return description;","lastModifiedDate":"2022-09-09"},{"lineNumber":40,"author":{"gitId":"roshankumar1991"},"content":"    }","lastModifiedDate":"2022-09-09"},{"lineNumber":41,"author":{"gitId":"roshankumar1991"},"content":"","lastModifiedDate":"2022-09-09"},{"lineNumber":42,"author":{"gitId":"roshankumar1991"},"content":"    /**","lastModifiedDate":"2022-09-18"},{"lineNumber":43,"author":{"gitId":"roshankumar1991"},"content":"     * This method is used to set the status of a task (Completed / Not completed).","lastModifiedDate":"2022-09-18"},{"lineNumber":44,"author":{"gitId":"roshankumar1991"},"content":"     */","lastModifiedDate":"2022-09-18"},{"lineNumber":45,"author":{"gitId":"roshankumar1991"},"content":"    public void setStatus(boolean isDone) {","lastModifiedDate":"2022-08-19"},{"lineNumber":46,"author":{"gitId":"roshankumar1991"},"content":"        this.isDone \u003d isDone;","lastModifiedDate":"2022-08-19"},{"lineNumber":47,"author":{"gitId":"roshankumar1991"},"content":"    }","lastModifiedDate":"2022-08-19"},{"lineNumber":48,"author":{"gitId":"roshankumar1991"},"content":"","lastModifiedDate":"2022-08-19"},{"lineNumber":49,"author":{"gitId":"roshankumar1991"},"content":"    /**","lastModifiedDate":"2022-09-18"},{"lineNumber":50,"author":{"gitId":"roshankumar1991"},"content":"     * This method is used to return the String output of the Task is a specified manner.","lastModifiedDate":"2022-09-18"},{"lineNumber":51,"author":{"gitId":"roshankumar1991"},"content":"     * @return Returns the String that includes the getStatus and description of the task.","lastModifiedDate":"2022-09-18"},{"lineNumber":52,"author":{"gitId":"roshankumar1991"},"content":"     */","lastModifiedDate":"2022-09-18"},{"lineNumber":53,"author":{"gitId":"roshankumar1991"},"content":"    public abstract String toString();","lastModifiedDate":"2022-09-09"},{"lineNumber":54,"author":{"gitId":"roshankumar1991"},"content":"}","lastModifiedDate":"2022-08-19"}],"authorContributionMap":{"roshankumar1991":54}},{"path":"src/main/java/task/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"roshankumar1991"},"content":"package task;","lastModifiedDate":"2022-09-09"},{"lineNumber":2,"author":{"gitId":"roshankumar1991"},"content":"","lastModifiedDate":"2022-09-09"},{"lineNumber":3,"author":{"gitId":"roshankumar1991"},"content":"/**","lastModifiedDate":"2022-09-18"},{"lineNumber":4,"author":{"gitId":"roshankumar1991"},"content":" * This program is a child of the Task program. It helps add a classification to the Task program.","lastModifiedDate":"2022-09-18"},{"lineNumber":5,"author":{"gitId":"roshankumar1991"},"content":" * This form of program includes a task that includes only a description but has no time set for its completion.","lastModifiedDate":"2022-09-18"},{"lineNumber":6,"author":{"gitId":"roshankumar1991"},"content":" */","lastModifiedDate":"2022-09-18"},{"lineNumber":7,"author":{"gitId":"roshankumar1991"},"content":"","lastModifiedDate":"2022-09-18"},{"lineNumber":8,"author":{"gitId":"roshankumar1991"},"content":"public class Todo extends Task {","lastModifiedDate":"2022-08-19"},{"lineNumber":9,"author":{"gitId":"roshankumar1991"},"content":"","lastModifiedDate":"2022-08-19"},{"lineNumber":10,"author":{"gitId":"roshankumar1991"},"content":"    /**","lastModifiedDate":"2022-09-18"},{"lineNumber":11,"author":{"gitId":"roshankumar1991"},"content":"     * This method provides a description for the Todo task.","lastModifiedDate":"2022-09-18"},{"lineNumber":12,"author":{"gitId":"roshankumar1991"},"content":"     * @param description Provides a description for the Todo task.","lastModifiedDate":"2022-09-18"},{"lineNumber":13,"author":{"gitId":"roshankumar1991"},"content":"     */","lastModifiedDate":"2022-09-18"},{"lineNumber":14,"author":{"gitId":"roshankumar1991"},"content":"","lastModifiedDate":"2022-09-18"},{"lineNumber":15,"author":{"gitId":"roshankumar1991"},"content":"    public Todo(String description) {","lastModifiedDate":"2022-08-19"},{"lineNumber":16,"author":{"gitId":"roshankumar1991"},"content":"        super(description);","lastModifiedDate":"2022-08-19"},{"lineNumber":17,"author":{"gitId":"roshankumar1991"},"content":"    }","lastModifiedDate":"2022-08-19"},{"lineNumber":18,"author":{"gitId":"roshankumar1991"},"content":"","lastModifiedDate":"2022-08-19"},{"lineNumber":19,"author":{"gitId":"roshankumar1991"},"content":"    /**","lastModifiedDate":"2022-09-18"},{"lineNumber":20,"author":{"gitId":"roshankumar1991"},"content":"     * This method provides a String format return for the Todo task.","lastModifiedDate":"2022-09-18"},{"lineNumber":21,"author":{"gitId":"roshankumar1991"},"content":"     * @return Returns a String in the unique format specified in the method.","lastModifiedDate":"2022-09-18"},{"lineNumber":22,"author":{"gitId":"roshankumar1991"},"content":"     */","lastModifiedDate":"2022-09-18"},{"lineNumber":23,"author":{"gitId":"roshankumar1991"},"content":"","lastModifiedDate":"2022-09-18"},{"lineNumber":24,"author":{"gitId":"roshankumar1991"},"content":"    @Override","lastModifiedDate":"2022-08-19"},{"lineNumber":25,"author":{"gitId":"roshankumar1991"},"content":"    public String toString() {","lastModifiedDate":"2022-08-19"},{"lineNumber":26,"author":{"gitId":"roshankumar1991"},"content":"        return \"[T]\" + \"[\" + getStatusIcon() + \"] \" + getDescription();","lastModifiedDate":"2022-09-09"},{"lineNumber":27,"author":{"gitId":"roshankumar1991"},"content":"    }","lastModifiedDate":"2022-08-19"},{"lineNumber":28,"author":{"gitId":"roshankumar1991"},"content":"}","lastModifiedDate":"2022-08-19"},{"lineNumber":29,"author":{"gitId":"roshankumar1991"},"content":"","lastModifiedDate":"2022-08-19"}],"authorContributionMap":{"roshankumar1991":29}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java","lastModifiedDate":"2020-08-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"roshankumar1991"},"content":"java -classpath ..\\bin command.Duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2022-09-09"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"-":20,"roshankumar1991":1}}]
