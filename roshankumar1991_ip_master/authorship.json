[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"roshankumar1991"},"content":"# Project Duke","lastModifiedDate":"2022-09-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"roshankumar1991"},"content":"This is a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it.","lastModifiedDate":"2022-09-24"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"## Setting up in Intellij","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update Intellij to the most recent version.","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project first)","lastModifiedDate":"2021-01-17"},{"lineNumber":10,"author":{"gitId":"-"},"content":"1. Open the project into Intellij as follows:","lastModifiedDate":"2021-01-17"},{"lineNumber":11,"author":{"gitId":"-"},"content":"   1. Click `Open`.","lastModifiedDate":"2021-01-17"},{"lineNumber":12,"author":{"gitId":"-"},"content":"   1. Select the project directory, and click `OK`.","lastModifiedDate":"2021-01-17"},{"lineNumber":13,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults.","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"1. Configure the project to use **JDK 11** (not other versions) as explained in [here](https://www.jetbrains.com/help/idea/sdk.html#set-up-jdk).\u003cbr\u003e","lastModifiedDate":"2021-07-29"},{"lineNumber":15,"author":{"gitId":"-"},"content":"   In the same dialog, set the **Project language level** field to the `SDK default` option.","lastModifiedDate":"2021-07-29"},{"lineNumber":16,"author":{"gitId":"roshankumar1991"},"content":"3. After that, locate the `src/main/java/command.Duke.java` file, right-click it, and choose `Run command.Duke.main()` (if the code editor is showing compile errors, try restarting the IDE). If the setup is correct, you should see something like the below as the output:","lastModifiedDate":"2022-09-09"},{"lineNumber":17,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"roshankumar1991"},"content":"Hello! I\u0027m Duke","lastModifiedDate":"2022-09-24"},{"lineNumber":19,"author":{"gitId":"roshankumar1991"},"content":"   ","lastModifiedDate":"2022-09-24"},{"lineNumber":20,"author":{"gitId":"roshankumar1991"},"content":"Let me load the existing data for you (if any)","lastModifiedDate":"2022-09-24"},{"lineNumber":21,"author":{"gitId":"roshankumar1991"},"content":"   ","lastModifiedDate":"2022-09-24"},{"lineNumber":22,"author":{"gitId":"roshankumar1991"},"content":"Please confirm if this current directory is correct.","lastModifiedDate":"2022-09-24"},{"lineNumber":23,"author":{"gitId":"roshankumar1991"},"content":"./data/","lastModifiedDate":"2022-09-24"},{"lineNumber":24,"author":{"gitId":"roshankumar1991"},"content":"   ","lastModifiedDate":"2022-09-24"},{"lineNumber":25,"author":{"gitId":"roshankumar1991"},"content":"If it is, please confirm by typing \u0027Yes\u0027","lastModifiedDate":"2022-09-24"},{"lineNumber":26,"author":{"gitId":"roshankumar1991"},"content":"If you want to select a different directory, please confirm by typing \u0027No\u0027","lastModifiedDate":"2022-09-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"roshankumar1991"},"content":"## Datafile Setup","lastModifiedDate":"2022-09-24"},{"lineNumber":29,"author":{"gitId":"roshankumar1991"},"content":"","lastModifiedDate":"2022-09-24"},{"lineNumber":30,"author":{"gitId":"roshankumar1991"},"content":"1. Selecting directory path","lastModifiedDate":"2022-09-24"},{"lineNumber":31,"author":{"gitId":"roshankumar1991"},"content":"","lastModifiedDate":"2022-09-24"},{"lineNumber":32,"author":{"gitId":"roshankumar1991"},"content":"This step allows you to select `./data/` as your directory used to store the data file if you select `yes`.","lastModifiedDate":"2022-09-24"},{"lineNumber":33,"author":{"gitId":"roshankumar1991"},"content":"","lastModifiedDate":"2022-09-24"},{"lineNumber":34,"author":{"gitId":"roshankumar1991"},"content":"You may also change the directory by selecting `no`, and thereafter keying in your preferred directory.\u003cbr\u003e","lastModifiedDate":"2022-09-24"},{"lineNumber":35,"author":{"gitId":"roshankumar1991"},"content":"`Please type the name of the directory. E.g. \u0027./data/\u0027`","lastModifiedDate":"2022-09-24"},{"lineNumber":36,"author":{"gitId":"roshankumar1991"},"content":"","lastModifiedDate":"2022-09-24"},{"lineNumber":37,"author":{"gitId":"roshankumar1991"},"content":"2. Selecting datafile name","lastModifiedDate":"2022-09-24"},{"lineNumber":38,"author":{"gitId":"roshankumar1991"},"content":"","lastModifiedDate":"2022-09-24"},{"lineNumber":39,"author":{"gitId":"roshankumar1991"},"content":"Once directory is specified, the program then asks you to confirm if the datafile name should be `duke.txt`.\u003cbr\u003e\u003cbr\u003e","lastModifiedDate":"2022-09-24"},{"lineNumber":40,"author":{"gitId":"roshankumar1991"},"content":"`Please confirm if this current file is correct.`\u003cbr\u003e","lastModifiedDate":"2022-09-24"},{"lineNumber":41,"author":{"gitId":"roshankumar1991"},"content":"`duke.txt`","lastModifiedDate":"2022-09-24"},{"lineNumber":42,"author":{"gitId":"roshankumar1991"},"content":"","lastModifiedDate":"2022-09-24"},{"lineNumber":43,"author":{"gitId":"roshankumar1991"},"content":"`If it is, please confirm by typing \u0027Yes\u0027`\u003cbr\u003e","lastModifiedDate":"2022-09-24"},{"lineNumber":44,"author":{"gitId":"roshankumar1991"},"content":"`If you want to select a different file, please confirm by typing \u0027No\u0027`","lastModifiedDate":"2022-09-24"},{"lineNumber":45,"author":{"gitId":"roshankumar1991"},"content":"","lastModifiedDate":"2022-09-24"},{"lineNumber":46,"author":{"gitId":"roshankumar1991"},"content":"If you wish to rename the default datafile name, select `no` and key in the preferred datafile name.","lastModifiedDate":"2022-09-24"},{"lineNumber":47,"author":{"gitId":"roshankumar1991"},"content":"","lastModifiedDate":"2022-09-24"},{"lineNumber":48,"author":{"gitId":"roshankumar1991"},"content":"3. Loading any existing data","lastModifiedDate":"2022-09-24"},{"lineNumber":49,"author":{"gitId":"roshankumar1991"},"content":"","lastModifiedDate":"2022-09-24"},{"lineNumber":50,"author":{"gitId":"roshankumar1991"},"content":"Once the directory has been specified and the datafile name has been confirmed, the program checks if there is an existing data file.\u003cbr\u003e\u003cbr\u003e","lastModifiedDate":"2022-09-24"},{"lineNumber":51,"author":{"gitId":"roshankumar1991"},"content":"If yes, it informs you of the datafile found and loads the content into the program. Else, it displays the following:\u003cbr\u003e\u003cbr\u003e","lastModifiedDate":"2022-09-24"},{"lineNumber":52,"author":{"gitId":"roshankumar1991"},"content":"`Thank you for your response`\u003cbr\u003e","lastModifiedDate":"2022-09-24"},{"lineNumber":53,"author":{"gitId":"roshankumar1991"},"content":"`No existing data is found`","lastModifiedDate":"2022-09-24"},{"lineNumber":54,"author":{"gitId":"roshankumar1991"},"content":"","lastModifiedDate":"2022-09-24"},{"lineNumber":55,"author":{"gitId":"roshankumar1991"},"content":"## UI Display","lastModifiedDate":"2022-09-24"},{"lineNumber":56,"author":{"gitId":"roshankumar1991"},"content":"","lastModifiedDate":"2022-09-24"},{"lineNumber":57,"author":{"gitId":"roshankumar1991"},"content":"Following this, the program displays the main UI page as the menu below:","lastModifiedDate":"2022-09-24"},{"lineNumber":58,"author":{"gitId":"roshankumar1991"},"content":"","lastModifiedDate":"2022-09-24"},{"lineNumber":59,"author":{"gitId":"roshankumar1991"},"content":"`What would you like to do ?`\u003cbr\u003e","lastModifiedDate":"2022-09-24"},{"lineNumber":60,"author":{"gitId":"roshankumar1991"},"content":"`List of valid entries include the following:`","lastModifiedDate":"2022-09-24"},{"lineNumber":61,"author":{"gitId":"roshankumar1991"},"content":"","lastModifiedDate":"2022-09-24"},{"lineNumber":62,"author":{"gitId":"roshankumar1991"},"content":"`\"Bye\\n\"     +`\u003cbr\u003e","lastModifiedDate":"2022-09-24"},{"lineNumber":63,"author":{"gitId":"roshankumar1991"},"content":"`\"List\\n\"    +`\u003cbr\u003e","lastModifiedDate":"2022-09-24"},{"lineNumber":64,"author":{"gitId":"roshankumar1991"},"content":"`\"Mark         \u0027X\u0027\\n\" +`\u003cbr\u003e","lastModifiedDate":"2022-09-24"},{"lineNumber":65,"author":{"gitId":"roshankumar1991"},"content":"`\"Unmark       \u0027X\u0027\\n\" +`\u003cbr\u003e","lastModifiedDate":"2022-09-24"},{"lineNumber":66,"author":{"gitId":"roshankumar1991"},"content":"`\"Delete       \u0027X\u0027\\n\" +`\u003cbr\u003e","lastModifiedDate":"2022-09-24"},{"lineNumber":67,"author":{"gitId":"roshankumar1991"},"content":"`\"Todo         \u0027Y\u0027\\n\" +`\u003cbr\u003e","lastModifiedDate":"2022-09-24"},{"lineNumber":68,"author":{"gitId":"roshankumar1991"},"content":"`\"Event        \u0027Y\u0027 /at \u0027Z\u0027\\n\" +`\u003cbr\u003e","lastModifiedDate":"2022-09-24"},{"lineNumber":69,"author":{"gitId":"roshankumar1991"},"content":"`\"Deadline     \u0027Y\u0027 /by \u0027Z\u0027\\n\" +`\u003cbr\u003e","lastModifiedDate":"2022-09-24"},{"lineNumber":70,"author":{"gitId":"roshankumar1991"},"content":"`\"Where \u0027X\u0027 refers to the task number, \u0027Y\u0027 refers to the task description and \u0027Z\u0027 refers to the date using the format YYYY-MM-DD.\\n\");`\u003cbr\u003e","lastModifiedDate":"2022-09-24"},{"lineNumber":71,"author":{"gitId":"roshankumar1991"},"content":"","lastModifiedDate":"2022-09-24"},{"lineNumber":72,"author":{"gitId":"roshankumar1991"},"content":"1. **Bye**\u003cbr\u003e","lastModifiedDate":"2022-09-24"},{"lineNumber":73,"author":{"gitId":"roshankumar1991"},"content":"   This option helps to exit from the Task Manager.\u003cbr\u003e\u003cbr\u003e","lastModifiedDate":"2022-09-24"},{"lineNumber":74,"author":{"gitId":"roshankumar1991"},"content":"","lastModifiedDate":"2022-09-24"},{"lineNumber":75,"author":{"gitId":"roshankumar1991"},"content":"1. **List**\u003cbr\u003e","lastModifiedDate":"2022-09-24"},{"lineNumber":76,"author":{"gitId":"roshankumar1991"},"content":"   This option lists all the items from the TaskList.\u003cbr\u003e\u003cbr\u003e","lastModifiedDate":"2022-09-24"},{"lineNumber":77,"author":{"gitId":"roshankumar1991"},"content":"1. **Mark**\u003cbr\u003e","lastModifiedDate":"2022-09-24"},{"lineNumber":78,"author":{"gitId":"roshankumar1991"},"content":"      This option helps to mark a task as completed, which changes its status icon from `[ ]` to `[X]`. User must specify task number to mark. \u003cbr\u003e\u003cbr\u003e","lastModifiedDate":"2022-09-24"},{"lineNumber":79,"author":{"gitId":"roshankumar1991"},"content":"1. **Unmark**\u003cbr\u003e","lastModifiedDate":"2022-09-24"},{"lineNumber":80,"author":{"gitId":"roshankumar1991"},"content":"   This option helps to mark a task as completed, which changes its status icon from `[X]` to `[ ]`. User must specify task number to unmark. \u003cbr\u003e\u003cbr\u003e","lastModifiedDate":"2022-09-24"},{"lineNumber":81,"author":{"gitId":"roshankumar1991"},"content":"1. **Delete**\u003cbr\u003e","lastModifiedDate":"2022-09-24"},{"lineNumber":82,"author":{"gitId":"roshankumar1991"},"content":"   This option removes a task from the TaskList. User must specify task number to delete.\u003cbr\u003e\u003cbr\u003e","lastModifiedDate":"2022-09-24"},{"lineNumber":83,"author":{"gitId":"roshankumar1991"},"content":"1. **Todo**\u003cbr\u003e","lastModifiedDate":"2022-09-24"},{"lineNumber":84,"author":{"gitId":"roshankumar1991"},"content":"   This option adds a `Todo` task into the TaskList. User must specify task description. One example is `Todo read book`.\u003cbr\u003e\u003cbr\u003e","lastModifiedDate":"2022-09-24"},{"lineNumber":85,"author":{"gitId":"roshankumar1991"},"content":"1. **Event**\u003cbr\u003e","lastModifiedDate":"2022-09-24"},{"lineNumber":86,"author":{"gitId":"roshankumar1991"},"content":"   This option adds an `Event` task into the TaskList. User must specify task description \u0026 date. One example is `Event concert /at 2022-12-30`.\u003cbr\u003e\u003cbr\u003e","lastModifiedDate":"2022-09-24"},{"lineNumber":87,"author":{"gitId":"roshankumar1991"},"content":"1. **Deadline**\u003cbr\u003e","lastModifiedDate":"2022-09-24"},{"lineNumber":88,"author":{"gitId":"roshankumar1991"},"content":"   This option adds an `Deadline` task into the TaskList. User must specify task description \u0026 date. One example is `Deadline homework /by 2022-09-26`.\u003cbr\u003e\u003cbr\u003e","lastModifiedDate":"2022-09-24"}],"authorContributionMap":{"-":15,"roshankumar1991":73}},{"path":"data/duke.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"roshankumar1991"},"content":"[T][X] read","lastModifiedDate":"2022-10-01"}],"authorContributionMap":{"roshankumar1991":1}},{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"roshankumar1991"},"content":"# Project Duke","lastModifiedDate":"2022-10-01"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":3,"author":{"gitId":"roshankumar1991"},"content":"This is a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it.","lastModifiedDate":"2022-10-01"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":5,"author":{"gitId":"roshankumar1991"},"content":"## Setting up in Intellij","lastModifiedDate":"2022-10-01"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":7,"author":{"gitId":"roshankumar1991"},"content":"Prerequisites: JDK 11, update Intellij to the most recent version.","lastModifiedDate":"2022-10-01"},{"lineNumber":8,"author":{"gitId":"roshankumar1991"},"content":"1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project first)","lastModifiedDate":"2022-10-01"},{"lineNumber":9,"author":{"gitId":"roshankumar1991"},"content":"1. Open the project into Intellij as follows:","lastModifiedDate":"2022-10-01"},{"lineNumber":10,"author":{"gitId":"roshankumar1991"},"content":"    1. Click `Open`.","lastModifiedDate":"2022-10-01"},{"lineNumber":11,"author":{"gitId":"roshankumar1991"},"content":"    1. Select the project directory, and click `OK`.","lastModifiedDate":"2022-10-01"},{"lineNumber":12,"author":{"gitId":"roshankumar1991"},"content":"    1. If there are any further prompts, accept the defaults.","lastModifiedDate":"2022-10-01"},{"lineNumber":13,"author":{"gitId":"roshankumar1991"},"content":"1. Configure the project to use **JDK 11** (not other versions) as explained in [here](https://www.jetbrains.com/help/idea/sdk.html#set-up-jdk).\u003cbr\u003e","lastModifiedDate":"2022-10-01"},{"lineNumber":14,"author":{"gitId":"roshankumar1991"},"content":"   In the same dialog, set the **Project language level** field to the `SDK default` option.","lastModifiedDate":"2022-10-01"},{"lineNumber":15,"author":{"gitId":"roshankumar1991"},"content":"3. After that, locate the `src/main/java/command.Duke.java` file, right-click it, and choose `Run command.Duke.main()` (if the code editor is showing compile errors, try restarting the IDE). If the setup is correct, you should see something like the below as the output:","lastModifiedDate":"2022-10-01"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":17,"author":{"gitId":"roshankumar1991"},"content":"```","lastModifiedDate":"2022-10-01"},{"lineNumber":18,"author":{"gitId":"roshankumar1991"},"content":"Hello! I\u0027m Duke","lastModifiedDate":"2022-10-01"},{"lineNumber":19,"author":{"gitId":"-"},"content":"   ","lastModifiedDate":"2021-07-17"},{"lineNumber":20,"author":{"gitId":"roshankumar1991"},"content":"Let me load the existing data for you (if any)","lastModifiedDate":"2022-10-01"},{"lineNumber":21,"author":{"gitId":"-"},"content":"   ","lastModifiedDate":"2019-07-29"},{"lineNumber":22,"author":{"gitId":"roshankumar1991"},"content":"Please confirm if this current directory is correct.","lastModifiedDate":"2022-10-01"},{"lineNumber":23,"author":{"gitId":"roshankumar1991"},"content":"./data/","lastModifiedDate":"2022-10-01"},{"lineNumber":24,"author":{"gitId":"-"},"content":"   ","lastModifiedDate":"2019-07-29"},{"lineNumber":25,"author":{"gitId":"roshankumar1991"},"content":"If it is, please confirm by typing \u0027Yes\u0027","lastModifiedDate":"2022-10-01"},{"lineNumber":26,"author":{"gitId":"roshankumar1991"},"content":"If you want to select a different directory, please confirm by typing \u0027No\u0027","lastModifiedDate":"2022-10-01"},{"lineNumber":27,"author":{"gitId":"roshankumar1991"},"content":"```","lastModifiedDate":"2022-10-01"},{"lineNumber":28,"author":{"gitId":"roshankumar1991"},"content":"## Datafile Setup","lastModifiedDate":"2022-10-01"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":30,"author":{"gitId":"roshankumar1991"},"content":"1. Selecting directory path","lastModifiedDate":"2022-10-01"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":32,"author":{"gitId":"roshankumar1991"},"content":"This step allows you to select `./data/` as your directory used to store the data file if you select `yes`.","lastModifiedDate":"2022-10-01"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":34,"author":{"gitId":"roshankumar1991"},"content":"You may also change the directory by selecting `no`, and thereafter keying in your preferred directory.\u003cbr\u003e","lastModifiedDate":"2022-10-01"},{"lineNumber":35,"author":{"gitId":"roshankumar1991"},"content":"`Please type the name of the directory. E.g. \u0027./data/\u0027`","lastModifiedDate":"2022-10-01"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":37,"author":{"gitId":"roshankumar1991"},"content":"2. Selecting datafile name","lastModifiedDate":"2022-10-01"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":39,"author":{"gitId":"roshankumar1991"},"content":"Once directory is specified, the program then asks you to confirm if the datafile name should be `duke.txt`.\u003cbr\u003e\u003cbr\u003e","lastModifiedDate":"2022-10-01"},{"lineNumber":40,"author":{"gitId":"roshankumar1991"},"content":"`Please confirm if this current file is correct.`\u003cbr\u003e","lastModifiedDate":"2022-10-01"},{"lineNumber":41,"author":{"gitId":"roshankumar1991"},"content":"`duke.txt`","lastModifiedDate":"2022-10-01"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":43,"author":{"gitId":"roshankumar1991"},"content":"`If it is, please confirm by typing \u0027Yes\u0027`\u003cbr\u003e","lastModifiedDate":"2022-10-01"},{"lineNumber":44,"author":{"gitId":"roshankumar1991"},"content":"`If you want to select a different file, please confirm by typing \u0027No\u0027`","lastModifiedDate":"2022-10-01"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":46,"author":{"gitId":"roshankumar1991"},"content":"If you wish to rename the default datafile name, select `no` and key in the preferred datafile name.","lastModifiedDate":"2022-10-01"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":48,"author":{"gitId":"roshankumar1991"},"content":"3. Loading any existing data","lastModifiedDate":"2022-10-01"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":50,"author":{"gitId":"roshankumar1991"},"content":"Once the directory has been specified and the datafile name has been confirmed, the program checks if there is an existing data file.\u003cbr\u003e\u003cbr\u003e","lastModifiedDate":"2022-10-01"},{"lineNumber":51,"author":{"gitId":"roshankumar1991"},"content":"If yes, it informs you of the datafile found and loads the content into the program. Else, it displays the following:\u003cbr\u003e\u003cbr\u003e","lastModifiedDate":"2022-10-01"},{"lineNumber":52,"author":{"gitId":"roshankumar1991"},"content":"`Thank you for your response`\u003cbr\u003e","lastModifiedDate":"2022-10-01"},{"lineNumber":53,"author":{"gitId":"roshankumar1991"},"content":"`No existing data is found`","lastModifiedDate":"2022-10-01"},{"lineNumber":54,"author":{"gitId":"roshankumar1991"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":55,"author":{"gitId":"roshankumar1991"},"content":"## UI Display","lastModifiedDate":"2022-10-01"},{"lineNumber":56,"author":{"gitId":"roshankumar1991"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":57,"author":{"gitId":"roshankumar1991"},"content":"Following this, the program displays the main UI page as the menu below:","lastModifiedDate":"2022-10-01"},{"lineNumber":58,"author":{"gitId":"roshankumar1991"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":59,"author":{"gitId":"roshankumar1991"},"content":"`What would you like to do ?`\u003cbr\u003e","lastModifiedDate":"2022-10-01"},{"lineNumber":60,"author":{"gitId":"roshankumar1991"},"content":"`List of valid entries include the following:`","lastModifiedDate":"2022-10-01"},{"lineNumber":61,"author":{"gitId":"roshankumar1991"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":62,"author":{"gitId":"roshankumar1991"},"content":"`\"Bye\\n\"     +`\u003cbr\u003e","lastModifiedDate":"2022-10-01"},{"lineNumber":63,"author":{"gitId":"roshankumar1991"},"content":"`\"List\\n\"    +`\u003cbr\u003e","lastModifiedDate":"2022-10-01"},{"lineNumber":64,"author":{"gitId":"roshankumar1991"},"content":"`\"Mark         \u0027X\u0027\\n\" +`\u003cbr\u003e","lastModifiedDate":"2022-10-01"},{"lineNumber":65,"author":{"gitId":"roshankumar1991"},"content":"`\"Unmark       \u0027X\u0027\\n\" +`\u003cbr\u003e","lastModifiedDate":"2022-10-01"},{"lineNumber":66,"author":{"gitId":"roshankumar1991"},"content":"`\"Delete       \u0027X\u0027\\n\" +`\u003cbr\u003e","lastModifiedDate":"2022-10-01"},{"lineNumber":67,"author":{"gitId":"roshankumar1991"},"content":"`\"Todo         \u0027Y\u0027\\n\" +`\u003cbr\u003e","lastModifiedDate":"2022-10-01"},{"lineNumber":68,"author":{"gitId":"roshankumar1991"},"content":"`\"Event        \u0027Y\u0027 /at \u0027Z\u0027\\n\" +`\u003cbr\u003e","lastModifiedDate":"2022-10-01"},{"lineNumber":69,"author":{"gitId":"roshankumar1991"},"content":"`\"Deadline     \u0027Y\u0027 /by \u0027Z\u0027\\n\" +`\u003cbr\u003e","lastModifiedDate":"2022-10-01"},{"lineNumber":70,"author":{"gitId":"roshankumar1991"},"content":"`\"Where \u0027X\u0027 refers to the task number, \u0027Y\u0027 refers to the task description and \u0027Z\u0027 refers to the date using the format YYYY-MM-DD.\\n\");`\u003cbr\u003e","lastModifiedDate":"2022-10-01"},{"lineNumber":71,"author":{"gitId":"roshankumar1991"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":72,"author":{"gitId":"roshankumar1991"},"content":"1. **Bye**\u003cbr\u003e","lastModifiedDate":"2022-10-01"},{"lineNumber":73,"author":{"gitId":"roshankumar1991"},"content":"   This option helps to exit from the Task Manager.\u003cbr\u003e\u003cbr\u003e","lastModifiedDate":"2022-10-01"},{"lineNumber":74,"author":{"gitId":"roshankumar1991"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":75,"author":{"gitId":"roshankumar1991"},"content":"1. **List**\u003cbr\u003e","lastModifiedDate":"2022-10-01"},{"lineNumber":76,"author":{"gitId":"roshankumar1991"},"content":"   This option lists all the items from the TaskList.\u003cbr\u003e\u003cbr\u003e","lastModifiedDate":"2022-10-01"},{"lineNumber":77,"author":{"gitId":"roshankumar1991"},"content":"1. **Mark**\u003cbr\u003e","lastModifiedDate":"2022-10-01"},{"lineNumber":78,"author":{"gitId":"roshankumar1991"},"content":"   This option helps to mark a task as completed, which changes its status icon from `[ ]` to `[X]`. User must specify task number to mark. \u003cbr\u003e\u003cbr\u003e","lastModifiedDate":"2022-10-01"},{"lineNumber":79,"author":{"gitId":"roshankumar1991"},"content":"1. **Unmark**\u003cbr\u003e","lastModifiedDate":"2022-10-01"},{"lineNumber":80,"author":{"gitId":"roshankumar1991"},"content":"   This option helps to mark a task as completed, which changes its status icon from `[X]` to `[ ]`. User must specify task number to unmark. \u003cbr\u003e\u003cbr\u003e","lastModifiedDate":"2022-10-01"},{"lineNumber":81,"author":{"gitId":"roshankumar1991"},"content":"1. **Delete**\u003cbr\u003e","lastModifiedDate":"2022-10-01"},{"lineNumber":82,"author":{"gitId":"roshankumar1991"},"content":"   This option removes a task from the TaskList. User must specify task number to delete.\u003cbr\u003e\u003cbr\u003e","lastModifiedDate":"2022-10-01"},{"lineNumber":83,"author":{"gitId":"roshankumar1991"},"content":"1. **Todo**\u003cbr\u003e","lastModifiedDate":"2022-10-01"},{"lineNumber":84,"author":{"gitId":"roshankumar1991"},"content":"   This option adds a `Todo` task into the TaskList. User must specify task description. One example is `Todo read book`.\u003cbr\u003e\u003cbr\u003e","lastModifiedDate":"2022-10-01"},{"lineNumber":85,"author":{"gitId":"roshankumar1991"},"content":"1. **Event**\u003cbr\u003e","lastModifiedDate":"2022-10-01"},{"lineNumber":86,"author":{"gitId":"roshankumar1991"},"content":"   This option adds an `Event` task into the TaskList. User must specify task description \u0026 date. One example is `Event concert /at 2022-12-30`.\u003cbr\u003e\u003cbr\u003e","lastModifiedDate":"2022-10-01"},{"lineNumber":87,"author":{"gitId":"roshankumar1991"},"content":"1. **Deadline**\u003cbr\u003e","lastModifiedDate":"2022-10-01"},{"lineNumber":88,"author":{"gitId":"roshankumar1991"},"content":"   This option adds an `Deadline` task into the TaskList. User must specify task description \u0026 date. One example is `Deadline homework /by 2022-09-26`.\u003cbr\u003e\u003cbr\u003e","lastModifiedDate":"2022-10-01"}],"authorContributionMap":{"-":16,"roshankumar1991":72}},{"path":"src/main/java/command/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"roshankumar1991"},"content":"package command;","lastModifiedDate":"2022-09-09"},{"lineNumber":2,"author":{"gitId":"roshankumar1991"},"content":"import task.DukeException;","lastModifiedDate":"2022-09-18"},{"lineNumber":3,"author":{"gitId":"roshankumar1991"},"content":"import java.io.IOException;","lastModifiedDate":"2022-09-19"},{"lineNumber":4,"author":{"gitId":"roshankumar1991"},"content":"","lastModifiedDate":"2022-09-18"},{"lineNumber":5,"author":{"gitId":"roshankumar1991"},"content":"/**","lastModifiedDate":"2022-09-18"},{"lineNumber":6,"author":{"gitId":"roshankumar1991"},"content":" * \u003ch2\u003e Duke, your personalized task manager \u003c/h2\u003e","lastModifiedDate":"2022-09-18"},{"lineNumber":7,"author":{"gitId":"roshankumar1991"},"content":" * \u003cbr\u003eThis task manager shall assist to add / remove various kinds of tasks that might include their estimated completion dates.","lastModifiedDate":"2022-09-18"},{"lineNumber":8,"author":{"gitId":"roshankumar1991"},"content":" * \u003cbr\u003eIt also allows you to view your current tasks at hand, check if they have been completed and check which tasks occur on any given date.","lastModifiedDate":"2022-09-18"},{"lineNumber":9,"author":{"gitId":"roshankumar1991"},"content":" * \u003cp\u003e","lastModifiedDate":"2022-09-18"},{"lineNumber":10,"author":{"gitId":"roshankumar1991"},"content":" * Its error-detection and user-input flexibility makes this task manager more functional and user-friendly.","lastModifiedDate":"2022-09-18"},{"lineNumber":11,"author":{"gitId":"roshankumar1991"},"content":" * \u003cbr\u003eHope you enjoy using this task manager !","lastModifiedDate":"2022-09-18"},{"lineNumber":12,"author":{"gitId":"roshankumar1991"},"content":" *","lastModifiedDate":"2022-09-18"},{"lineNumber":13,"author":{"gitId":"roshankumar1991"},"content":" * @author Roshan Kumar","lastModifiedDate":"2022-09-18"},{"lineNumber":14,"author":{"gitId":"roshankumar1991"},"content":" * @version 1.0","lastModifiedDate":"2022-09-18"},{"lineNumber":15,"author":{"gitId":"roshankumar1991"},"content":" * @since 18/09/2022","lastModifiedDate":"2022-09-18"},{"lineNumber":16,"author":{"gitId":"roshankumar1991"},"content":" */","lastModifiedDate":"2022-09-18"},{"lineNumber":17,"author":{"gitId":"roshankumar1991"},"content":"","lastModifiedDate":"2022-09-18"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":19,"author":{"gitId":"roshankumar1991"},"content":"","lastModifiedDate":"2022-09-18"},{"lineNumber":20,"author":{"gitId":"roshankumar1991"},"content":"    /**","lastModifiedDate":"2022-09-18"},{"lineNumber":21,"author":{"gitId":"roshankumar1991"},"content":"     * This is the main method which does 2 key things to get the program started.","lastModifiedDate":"2022-09-18"},{"lineNumber":22,"author":{"gitId":"roshankumar1991"},"content":"     *\u003cbr\u003e  1. It loads any previously stored Tasks List into the current program, so you can continue from that point forward.","lastModifiedDate":"2022-09-18"},{"lineNumber":23,"author":{"gitId":"roshankumar1991"},"content":"     *\u003cbr\u003e  2. It loads the UI class that starts the interaction with the user.","lastModifiedDate":"2022-09-18"},{"lineNumber":24,"author":{"gitId":"roshankumar1991"},"content":"     * @param args Unused.","lastModifiedDate":"2022-09-18"},{"lineNumber":25,"author":{"gitId":"roshankumar1991"},"content":"     * @throws DukeException Error thrown when user input is not complete or in an unreadable format.","lastModifiedDate":"2022-09-18"},{"lineNumber":26,"author":{"gitId":"roshankumar1991"},"content":"     * @see DukeException","lastModifiedDate":"2022-09-18"},{"lineNumber":27,"author":{"gitId":"roshankumar1991"},"content":"     */","lastModifiedDate":"2022-09-18"},{"lineNumber":28,"author":{"gitId":"roshankumar1991"},"content":"","lastModifiedDate":"2022-09-18"},{"lineNumber":29,"author":{"gitId":"roshankumar1991"},"content":"    public static void main(String[] args) throws DukeException, IOException {","lastModifiedDate":"2022-09-19"},{"lineNumber":30,"author":{"gitId":"roshankumar1991"},"content":"        Ui.main(); //Start interaction with User","lastModifiedDate":"2022-09-19"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-07-29"},{"lineNumber":32,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"-":3,"roshankumar1991":29}},{"path":"src/main/java/command/FilePath.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"roshankumar1991"},"content":"package command;","lastModifiedDate":"2022-09-19"},{"lineNumber":2,"author":{"gitId":"roshankumar1991"},"content":"","lastModifiedDate":"2022-09-19"},{"lineNumber":3,"author":{"gitId":"roshankumar1991"},"content":"import task.DukeException;","lastModifiedDate":"2022-09-19"},{"lineNumber":4,"author":{"gitId":"roshankumar1991"},"content":"","lastModifiedDate":"2022-09-19"},{"lineNumber":5,"author":{"gitId":"roshankumar1991"},"content":"import java.io.File;","lastModifiedDate":"2022-09-19"},{"lineNumber":6,"author":{"gitId":"roshankumar1991"},"content":"import java.io.FileOutputStream;","lastModifiedDate":"2022-09-19"},{"lineNumber":7,"author":{"gitId":"roshankumar1991"},"content":"import java.io.IOException;","lastModifiedDate":"2022-09-19"},{"lineNumber":8,"author":{"gitId":"roshankumar1991"},"content":"import java.nio.file.Files;","lastModifiedDate":"2022-09-19"},{"lineNumber":9,"author":{"gitId":"roshankumar1991"},"content":"import java.nio.file.Path;","lastModifiedDate":"2022-09-19"},{"lineNumber":10,"author":{"gitId":"roshankumar1991"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2022-09-19"},{"lineNumber":11,"author":{"gitId":"roshankumar1991"},"content":"import java.util.Scanner;","lastModifiedDate":"2022-09-19"},{"lineNumber":12,"author":{"gitId":"roshankumar1991"},"content":"","lastModifiedDate":"2022-09-19"},{"lineNumber":13,"author":{"gitId":"roshankumar1991"},"content":"/**","lastModifiedDate":"2022-09-19"},{"lineNumber":14,"author":{"gitId":"roshankumar1991"},"content":" * This class allows the user to modify both the directory and filename for a flexible data source.","lastModifiedDate":"2022-09-19"},{"lineNumber":15,"author":{"gitId":"roshankumar1991"},"content":" */","lastModifiedDate":"2022-09-19"},{"lineNumber":16,"author":{"gitId":"roshankumar1991"},"content":"public class FilePath {","lastModifiedDate":"2022-09-19"},{"lineNumber":17,"author":{"gitId":"roshankumar1991"},"content":"    public static String Directory \u003d \"./data/\";","lastModifiedDate":"2022-09-19"},{"lineNumber":18,"author":{"gitId":"roshankumar1991"},"content":"    public static String Filename \u003d \"duke.txt\";","lastModifiedDate":"2022-09-19"},{"lineNumber":19,"author":{"gitId":"roshankumar1991"},"content":"    public static String FileLocation \u003d Directory + Filename;","lastModifiedDate":"2022-09-19"},{"lineNumber":20,"author":{"gitId":"roshankumar1991"},"content":"","lastModifiedDate":"2022-09-19"},{"lineNumber":21,"author":{"gitId":"roshankumar1991"},"content":"    /**","lastModifiedDate":"2022-09-19"},{"lineNumber":22,"author":{"gitId":"roshankumar1991"},"content":"     * This method takes in a user input and understands if it is a yes or no.","lastModifiedDate":"2022-09-19"},{"lineNumber":23,"author":{"gitId":"roshankumar1991"},"content":"     * @return Return yes or no command.","lastModifiedDate":"2022-09-19"},{"lineNumber":24,"author":{"gitId":"roshankumar1991"},"content":"     * @throws DukeException Throw error if command is not recognized.","lastModifiedDate":"2022-09-19"},{"lineNumber":25,"author":{"gitId":"roshankumar1991"},"content":"     */","lastModifiedDate":"2022-09-19"},{"lineNumber":26,"author":{"gitId":"roshankumar1991"},"content":"","lastModifiedDate":"2022-09-19"},{"lineNumber":27,"author":{"gitId":"roshankumar1991"},"content":"    public static boolean command() throws DukeException {","lastModifiedDate":"2022-09-19"},{"lineNumber":28,"author":{"gitId":"roshankumar1991"},"content":"        boolean response;","lastModifiedDate":"2022-09-19"},{"lineNumber":29,"author":{"gitId":"roshankumar1991"},"content":"        Scanner in \u003d new Scanner(System.in);","lastModifiedDate":"2022-09-19"},{"lineNumber":30,"author":{"gitId":"roshankumar1991"},"content":"        String line \u003d in.nextLine();","lastModifiedDate":"2022-09-19"},{"lineNumber":31,"author":{"gitId":"roshankumar1991"},"content":"","lastModifiedDate":"2022-09-19"},{"lineNumber":32,"author":{"gitId":"roshankumar1991"},"content":"        if (line.trim().toLowerCase().contains(\"yes\"))     { response \u003d true;}","lastModifiedDate":"2022-09-19"},{"lineNumber":33,"author":{"gitId":"roshankumar1991"},"content":"        else if (line.trim().toLowerCase().contains(\"no\")) { response \u003d false;}","lastModifiedDate":"2022-09-19"},{"lineNumber":34,"author":{"gitId":"roshankumar1991"},"content":"        else {","lastModifiedDate":"2022-09-19"},{"lineNumber":35,"author":{"gitId":"roshankumar1991"},"content":"            throw new DukeException(\"Error, please enter either \u0027Yes\u0027 or \u0027No\u0027\");","lastModifiedDate":"2022-09-19"},{"lineNumber":36,"author":{"gitId":"roshankumar1991"},"content":"        }","lastModifiedDate":"2022-09-19"},{"lineNumber":37,"author":{"gitId":"roshankumar1991"},"content":"        return response;","lastModifiedDate":"2022-09-19"},{"lineNumber":38,"author":{"gitId":"roshankumar1991"},"content":"    }","lastModifiedDate":"2022-09-19"},{"lineNumber":39,"author":{"gitId":"roshankumar1991"},"content":"","lastModifiedDate":"2022-09-19"},{"lineNumber":40,"author":{"gitId":"roshankumar1991"},"content":"    /**","lastModifiedDate":"2022-09-19"},{"lineNumber":41,"author":{"gitId":"roshankumar1991"},"content":"     * This method checks if there is any file within the directory and creates it if it isn\u0027t. If files already exist, it asks the user-input to choose which file to initialize.","lastModifiedDate":"2022-09-19"},{"lineNumber":42,"author":{"gitId":"roshankumar1991"},"content":"     * @throws DukeException Throws error if user-input doesn\u0027t contain any file names that match within that directory.","lastModifiedDate":"2022-09-19"},{"lineNumber":43,"author":{"gitId":"roshankumar1991"},"content":"     * @throws IOException Error if file cannot be found or created.","lastModifiedDate":"2022-09-19"},{"lineNumber":44,"author":{"gitId":"roshankumar1991"},"content":"     */","lastModifiedDate":"2022-09-19"},{"lineNumber":45,"author":{"gitId":"roshankumar1991"},"content":"","lastModifiedDate":"2022-09-19"},{"lineNumber":46,"author":{"gitId":"roshankumar1991"},"content":"    public static void InputFile() throws DukeException, IOException {","lastModifiedDate":"2022-09-19"},{"lineNumber":47,"author":{"gitId":"roshankumar1991"},"content":"        String[] input;","lastModifiedDate":"2022-09-19"},{"lineNumber":48,"author":{"gitId":"roshankumar1991"},"content":"        File f \u003d new File(Directory);","lastModifiedDate":"2022-09-19"},{"lineNumber":49,"author":{"gitId":"roshankumar1991"},"content":"        input \u003d f.list();","lastModifiedDate":"2022-09-19"},{"lineNumber":50,"author":{"gitId":"roshankumar1991"},"content":"","lastModifiedDate":"2022-09-19"},{"lineNumber":51,"author":{"gitId":"roshankumar1991"},"content":"        boolean found \u003d false; // Whether user-input matches files existing inside Directory","lastModifiedDate":"2022-09-19"},{"lineNumber":52,"author":{"gitId":"roshankumar1991"},"content":"","lastModifiedDate":"2022-09-19"},{"lineNumber":53,"author":{"gitId":"roshankumar1991"},"content":"        if (input \u003d\u003d null) {","lastModifiedDate":"2022-09-19"},{"lineNumber":54,"author":{"gitId":"roshankumar1991"},"content":"            System.out.println(\"Directory exists but no files inside currently. Shall create a file called \u0027duke.txt\");","lastModifiedDate":"2022-09-19"},{"lineNumber":55,"author":{"gitId":"roshankumar1991"},"content":"            Path path \u003d Paths.get(Directory + Filename);","lastModifiedDate":"2022-09-19"},{"lineNumber":56,"author":{"gitId":"roshankumar1991"},"content":"            Files.createFile(path);","lastModifiedDate":"2022-09-19"},{"lineNumber":57,"author":{"gitId":"roshankumar1991"},"content":"        }","lastModifiedDate":"2022-09-19"},{"lineNumber":58,"author":{"gitId":"roshankumar1991"},"content":"        else {","lastModifiedDate":"2022-09-19"},{"lineNumber":59,"author":{"gitId":"roshankumar1991"},"content":"            System.out.println(\"Please view the list of the files in the current directory\\n\");","lastModifiedDate":"2022-09-19"},{"lineNumber":60,"author":{"gitId":"roshankumar1991"},"content":"            for (String l : input) {","lastModifiedDate":"2022-09-19"},{"lineNumber":61,"author":{"gitId":"roshankumar1991"},"content":"                System.out.println(l);","lastModifiedDate":"2022-09-19"},{"lineNumber":62,"author":{"gitId":"roshankumar1991"},"content":"            }","lastModifiedDate":"2022-09-19"},{"lineNumber":63,"author":{"gitId":"roshankumar1991"},"content":"","lastModifiedDate":"2022-09-19"},{"lineNumber":64,"author":{"gitId":"roshankumar1991"},"content":"            System.out.println(\"\\nPlease type the name of the file including the file extension. E.g. duke.txt\\n\");","lastModifiedDate":"2022-09-19"},{"lineNumber":65,"author":{"gitId":"roshankumar1991"},"content":"","lastModifiedDate":"2022-09-19"},{"lineNumber":66,"author":{"gitId":"roshankumar1991"},"content":"            Scanner in \u003d new Scanner(System.in);","lastModifiedDate":"2022-09-19"},{"lineNumber":67,"author":{"gitId":"roshankumar1991"},"content":"            String line \u003d in.nextLine();","lastModifiedDate":"2022-09-19"},{"lineNumber":68,"author":{"gitId":"roshankumar1991"},"content":"","lastModifiedDate":"2022-09-19"},{"lineNumber":69,"author":{"gitId":"roshankumar1991"},"content":"            for (String l : input) {","lastModifiedDate":"2022-09-19"},{"lineNumber":70,"author":{"gitId":"roshankumar1991"},"content":"                if (l.equals(line)) {","lastModifiedDate":"2022-09-19"},{"lineNumber":71,"author":{"gitId":"roshankumar1991"},"content":"                    Filename \u003d line;","lastModifiedDate":"2022-09-19"},{"lineNumber":72,"author":{"gitId":"roshankumar1991"},"content":"                    found \u003d true;","lastModifiedDate":"2022-09-19"},{"lineNumber":73,"author":{"gitId":"roshankumar1991"},"content":"                    System.out.println(\"Thank you for your response\");","lastModifiedDate":"2022-09-19"},{"lineNumber":74,"author":{"gitId":"roshankumar1991"},"content":"                }","lastModifiedDate":"2022-09-19"},{"lineNumber":75,"author":{"gitId":"roshankumar1991"},"content":"            }","lastModifiedDate":"2022-09-19"},{"lineNumber":76,"author":{"gitId":"roshankumar1991"},"content":"            if (!(found)) {","lastModifiedDate":"2022-09-19"},{"lineNumber":77,"author":{"gitId":"roshankumar1991"},"content":"                throw new DukeException(\"Error, please entire a filename that exists within this directory\");","lastModifiedDate":"2022-09-19"},{"lineNumber":78,"author":{"gitId":"roshankumar1991"},"content":"            }","lastModifiedDate":"2022-09-19"},{"lineNumber":79,"author":{"gitId":"roshankumar1991"},"content":"        }","lastModifiedDate":"2022-09-19"},{"lineNumber":80,"author":{"gitId":"roshankumar1991"},"content":"    }","lastModifiedDate":"2022-09-19"},{"lineNumber":81,"author":{"gitId":"roshankumar1991"},"content":"","lastModifiedDate":"2022-09-19"},{"lineNumber":82,"author":{"gitId":"roshankumar1991"},"content":"    /**","lastModifiedDate":"2022-09-19"},{"lineNumber":83,"author":{"gitId":"roshankumar1991"},"content":"     * This method creates a directory if it previously doesn\u0027t exist yet.","lastModifiedDate":"2022-09-19"},{"lineNumber":84,"author":{"gitId":"roshankumar1991"},"content":"     * @return Status of whether directory already exists or has been newly created.","lastModifiedDate":"2022-09-19"},{"lineNumber":85,"author":{"gitId":"roshankumar1991"},"content":"     * @throws IOException Error if directory cannot be found or created.","lastModifiedDate":"2022-09-19"},{"lineNumber":86,"author":{"gitId":"roshankumar1991"},"content":"     */","lastModifiedDate":"2022-09-19"},{"lineNumber":87,"author":{"gitId":"roshankumar1991"},"content":"","lastModifiedDate":"2022-09-19"},{"lineNumber":88,"author":{"gitId":"roshankumar1991"},"content":"    public static boolean InputDirectory() throws IOException {","lastModifiedDate":"2022-09-19"},{"lineNumber":89,"author":{"gitId":"roshankumar1991"},"content":"        boolean existing \u003d true;","lastModifiedDate":"2022-09-19"},{"lineNumber":90,"author":{"gitId":"roshankumar1991"},"content":"","lastModifiedDate":"2022-09-19"},{"lineNumber":91,"author":{"gitId":"roshankumar1991"},"content":"        System.out.println(\"Please type the name of the directory. E.g. \u0027./data/\u0027\\n\");","lastModifiedDate":"2022-09-19"},{"lineNumber":92,"author":{"gitId":"roshankumar1991"},"content":"","lastModifiedDate":"2022-09-19"},{"lineNumber":93,"author":{"gitId":"roshankumar1991"},"content":"        Scanner in \u003d new Scanner(System.in);","lastModifiedDate":"2022-09-19"},{"lineNumber":94,"author":{"gitId":"roshankumar1991"},"content":"        String line \u003d in.nextLine();","lastModifiedDate":"2022-09-19"},{"lineNumber":95,"author":{"gitId":"roshankumar1991"},"content":"","lastModifiedDate":"2022-09-19"},{"lineNumber":96,"author":{"gitId":"roshankumar1991"},"content":"        File f \u003d new File(line);","lastModifiedDate":"2022-09-19"},{"lineNumber":97,"author":{"gitId":"roshankumar1991"},"content":"","lastModifiedDate":"2022-09-19"},{"lineNumber":98,"author":{"gitId":"roshankumar1991"},"content":"        if (!(f.isDirectory())) {","lastModifiedDate":"2022-09-19"},{"lineNumber":99,"author":{"gitId":"roshankumar1991"},"content":"            System.out.println(\"No existing directory. Creating directory and file named \u0027duke.txt\u0027 inside it.\");","lastModifiedDate":"2022-09-19"},{"lineNumber":100,"author":{"gitId":"roshankumar1991"},"content":"","lastModifiedDate":"2022-09-19"},{"lineNumber":101,"author":{"gitId":"roshankumar1991"},"content":"            Files.createDirectories(Paths.get(line));","lastModifiedDate":"2022-09-19"},{"lineNumber":102,"author":{"gitId":"roshankumar1991"},"content":"            Path path \u003d Paths.get(line + Filename);","lastModifiedDate":"2022-09-19"},{"lineNumber":103,"author":{"gitId":"roshankumar1991"},"content":"            Files.createFile(path);","lastModifiedDate":"2022-09-19"},{"lineNumber":104,"author":{"gitId":"roshankumar1991"},"content":"","lastModifiedDate":"2022-09-19"},{"lineNumber":105,"author":{"gitId":"roshankumar1991"},"content":"            existing \u003d false;","lastModifiedDate":"2022-09-19"},{"lineNumber":106,"author":{"gitId":"roshankumar1991"},"content":"        }","lastModifiedDate":"2022-09-19"},{"lineNumber":107,"author":{"gitId":"roshankumar1991"},"content":"","lastModifiedDate":"2022-09-19"},{"lineNumber":108,"author":{"gitId":"roshankumar1991"},"content":"        Directory \u003d line;","lastModifiedDate":"2022-09-19"},{"lineNumber":109,"author":{"gitId":"roshankumar1991"},"content":"        return existing;","lastModifiedDate":"2022-09-19"},{"lineNumber":110,"author":{"gitId":"roshankumar1991"},"content":"    }","lastModifiedDate":"2022-09-19"},{"lineNumber":111,"author":{"gitId":"roshankumar1991"},"content":"","lastModifiedDate":"2022-09-19"},{"lineNumber":112,"author":{"gitId":"roshankumar1991"},"content":"    /**","lastModifiedDate":"2022-09-19"},{"lineNumber":113,"author":{"gitId":"roshankumar1991"},"content":"     * This main method initiates discussion with the user on the choice of directory and filename. It then selects that filepath and passes it into the main program for execution.","lastModifiedDate":"2022-09-19"},{"lineNumber":114,"author":{"gitId":"roshankumar1991"},"content":"     * @throws DukeException Error if the user enters incompatible data.","lastModifiedDate":"2022-09-19"},{"lineNumber":115,"author":{"gitId":"roshankumar1991"},"content":"     * @throws IOException Error if file / directory cannot be found or created.","lastModifiedDate":"2022-09-19"},{"lineNumber":116,"author":{"gitId":"roshankumar1991"},"content":"     */","lastModifiedDate":"2022-09-19"},{"lineNumber":117,"author":{"gitId":"roshankumar1991"},"content":"","lastModifiedDate":"2022-09-19"},{"lineNumber":118,"author":{"gitId":"roshankumar1991"},"content":"    public static void main() throws DukeException, IOException {","lastModifiedDate":"2022-09-19"},{"lineNumber":119,"author":{"gitId":"roshankumar1991"},"content":"        boolean response;","lastModifiedDate":"2022-09-19"},{"lineNumber":120,"author":{"gitId":"roshankumar1991"},"content":"","lastModifiedDate":"2022-09-19"},{"lineNumber":121,"author":{"gitId":"roshankumar1991"},"content":"        //Create existing directory and file if it doesn\u0027t exist","lastModifiedDate":"2022-09-19"},{"lineNumber":122,"author":{"gitId":"roshankumar1991"},"content":"        Files.createDirectories(Paths.get(Directory));","lastModifiedDate":"2022-09-19"},{"lineNumber":123,"author":{"gitId":"roshankumar1991"},"content":"        new FileOutputStream(FileLocation, true).close();","lastModifiedDate":"2022-09-19"},{"lineNumber":124,"author":{"gitId":"roshankumar1991"},"content":"","lastModifiedDate":"2022-09-19"},{"lineNumber":125,"author":{"gitId":"roshankumar1991"},"content":"        System.out.println(\"Let me load the existing data for you (if any)\\n\");","lastModifiedDate":"2022-09-19"},{"lineNumber":126,"author":{"gitId":"roshankumar1991"},"content":"        System.out.println(\"Please confirm if this current directory is correct.\");","lastModifiedDate":"2022-09-19"},{"lineNumber":127,"author":{"gitId":"roshankumar1991"},"content":"        System.out.println(Directory + \"\\n\");","lastModifiedDate":"2022-09-19"},{"lineNumber":128,"author":{"gitId":"roshankumar1991"},"content":"        System.out.println(\"If it is, please confirm by typing \u0027Yes\u0027\");","lastModifiedDate":"2022-09-19"},{"lineNumber":129,"author":{"gitId":"roshankumar1991"},"content":"        System.out.println(\"If you want to select a different directory, please confirm by typing \u0027No\u0027\\n\");","lastModifiedDate":"2022-09-19"},{"lineNumber":130,"author":{"gitId":"roshankumar1991"},"content":"","lastModifiedDate":"2022-09-19"},{"lineNumber":131,"author":{"gitId":"roshankumar1991"},"content":"        response \u003d command();","lastModifiedDate":"2022-09-19"},{"lineNumber":132,"author":{"gitId":"roshankumar1991"},"content":"","lastModifiedDate":"2022-09-19"},{"lineNumber":133,"author":{"gitId":"roshankumar1991"},"content":"        if (response) {","lastModifiedDate":"2022-09-19"},{"lineNumber":134,"author":{"gitId":"roshankumar1991"},"content":"            System.out.println(\"Please confirm if this current file is correct.\");","lastModifiedDate":"2022-09-19"},{"lineNumber":135,"author":{"gitId":"roshankumar1991"},"content":"            System.out.println(Filename + \"\\n\");","lastModifiedDate":"2022-09-19"},{"lineNumber":136,"author":{"gitId":"roshankumar1991"},"content":"            System.out.println(\"If it is, please confirm by typing \u0027Yes\u0027\");","lastModifiedDate":"2022-09-19"},{"lineNumber":137,"author":{"gitId":"roshankumar1991"},"content":"            System.out.println(\"If you want to select a different file, please confirm by typing \u0027No\u0027\\n\");","lastModifiedDate":"2022-09-19"},{"lineNumber":138,"author":{"gitId":"roshankumar1991"},"content":"","lastModifiedDate":"2022-09-19"},{"lineNumber":139,"author":{"gitId":"roshankumar1991"},"content":"            response \u003d command();","lastModifiedDate":"2022-09-19"},{"lineNumber":140,"author":{"gitId":"roshankumar1991"},"content":"","lastModifiedDate":"2022-09-19"},{"lineNumber":141,"author":{"gitId":"roshankumar1991"},"content":"            if (response) { System.out.println(\"Thank you for your response\");}","lastModifiedDate":"2022-09-19"},{"lineNumber":142,"author":{"gitId":"roshankumar1991"},"content":"            else { InputFile();}","lastModifiedDate":"2022-09-19"},{"lineNumber":143,"author":{"gitId":"roshankumar1991"},"content":"        }","lastModifiedDate":"2022-09-19"},{"lineNumber":144,"author":{"gitId":"roshankumar1991"},"content":"        else {","lastModifiedDate":"2022-09-19"},{"lineNumber":145,"author":{"gitId":"roshankumar1991"},"content":"            if (InputDirectory()) { InputFile();}","lastModifiedDate":"2022-09-19"},{"lineNumber":146,"author":{"gitId":"roshankumar1991"},"content":"        }","lastModifiedDate":"2022-09-19"},{"lineNumber":147,"author":{"gitId":"roshankumar1991"},"content":"","lastModifiedDate":"2022-09-19"},{"lineNumber":148,"author":{"gitId":"roshankumar1991"},"content":"        FileLocation \u003d Directory + Filename;","lastModifiedDate":"2022-09-19"},{"lineNumber":149,"author":{"gitId":"roshankumar1991"},"content":"        Storage.main();    //Load existing file data into initial TaskList","lastModifiedDate":"2022-09-19"},{"lineNumber":150,"author":{"gitId":"roshankumar1991"},"content":"    }","lastModifiedDate":"2022-09-19"},{"lineNumber":151,"author":{"gitId":"roshankumar1991"},"content":"}","lastModifiedDate":"2022-09-19"}],"authorContributionMap":{"roshankumar1991":151}},{"path":"src/main/java/command/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"roshankumar1991"},"content":"package command;","lastModifiedDate":"2022-09-18"},{"lineNumber":2,"author":{"gitId":"roshankumar1991"},"content":"","lastModifiedDate":"2022-09-18"},{"lineNumber":3,"author":{"gitId":"roshankumar1991"},"content":"import task.TaskList;","lastModifiedDate":"2022-09-18"},{"lineNumber":4,"author":{"gitId":"roshankumar1991"},"content":"import task.DukeException;","lastModifiedDate":"2022-09-18"},{"lineNumber":5,"author":{"gitId":"roshankumar1991"},"content":"","lastModifiedDate":"2022-09-18"},{"lineNumber":6,"author":{"gitId":"roshankumar1991"},"content":"import java.io.IOException;","lastModifiedDate":"2022-09-19"},{"lineNumber":7,"author":{"gitId":"roshankumar1991"},"content":"import java.time.LocalDate;","lastModifiedDate":"2022-09-19"},{"lineNumber":8,"author":{"gitId":"roshankumar1991"},"content":"","lastModifiedDate":"2022-09-19"},{"lineNumber":9,"author":{"gitId":"roshankumar1991"},"content":"/**","lastModifiedDate":"2022-09-18"},{"lineNumber":10,"author":{"gitId":"roshankumar1991"},"content":" * This class registers the user-inputs and makes sense of the command that the program is supposed to execute.","lastModifiedDate":"2022-09-18"},{"lineNumber":11,"author":{"gitId":"roshankumar1991"},"content":" * \u003cbr\u003e It contains the following approved actions:","lastModifiedDate":"2022-09-18"},{"lineNumber":12,"author":{"gitId":"roshankumar1991"},"content":" * \u003col\u003e","lastModifiedDate":"2022-09-18"},{"lineNumber":13,"author":{"gitId":"roshankumar1991"},"content":" *     \u003cli\u003eList: Allows to list all the tasks inside TaskList\u003c/li\u003e","lastModifiedDate":"2022-09-18"},{"lineNumber":14,"author":{"gitId":"roshankumar1991"},"content":" *     \u003cli\u003eBye: Exits the Task Manager\u003c/li\u003e","lastModifiedDate":"2022-09-18"},{"lineNumber":15,"author":{"gitId":"roshankumar1991"},"content":" *     \u003cli\u003eDone: Marks a task as completed\u003c/li\u003e","lastModifiedDate":"2022-09-18"},{"lineNumber":16,"author":{"gitId":"roshankumar1991"},"content":" *     \u003cli\u003eDelete: Deletes a task from the TaskList\u003c/li\u003e","lastModifiedDate":"2022-09-18"},{"lineNumber":17,"author":{"gitId":"roshankumar1991"},"content":" *     \u003cli\u003eTodo / Event / Deadline: Adds one of the following tasks into the TaskList\u003c/li\u003e","lastModifiedDate":"2022-09-18"},{"lineNumber":18,"author":{"gitId":"roshankumar1991"},"content":" * \u003c/ol\u003e","lastModifiedDate":"2022-09-18"},{"lineNumber":19,"author":{"gitId":"roshankumar1991"},"content":" * \u003cp\u003e","lastModifiedDate":"2022-09-18"},{"lineNumber":20,"author":{"gitId":"roshankumar1991"},"content":" * Once it understand what the user-input is referring to, it passes the appropriate command to the TaskList for execution.","lastModifiedDate":"2022-09-18"},{"lineNumber":21,"author":{"gitId":"roshankumar1991"},"content":" */","lastModifiedDate":"2022-09-18"},{"lineNumber":22,"author":{"gitId":"roshankumar1991"},"content":"public class Parser {","lastModifiedDate":"2022-09-18"},{"lineNumber":23,"author":{"gitId":"roshankumar1991"},"content":"    protected static String by;","lastModifiedDate":"2022-09-19"},{"lineNumber":24,"author":{"gitId":"roshankumar1991"},"content":"    protected static LocalDate localDate;","lastModifiedDate":"2022-09-19"},{"lineNumber":25,"author":{"gitId":"roshankumar1991"},"content":"","lastModifiedDate":"2022-09-18"},{"lineNumber":26,"author":{"gitId":"roshankumar1991"},"content":"    /**","lastModifiedDate":"2022-09-18"},{"lineNumber":27,"author":{"gitId":"roshankumar1991"},"content":"     * This method takes in a user-input as a String, makes sense of the command and returns a command to the TaskList for execution or","lastModifiedDate":"2022-09-19"},{"lineNumber":28,"author":{"gitId":"roshankumar1991"},"content":"     * returns a relevant Date.","lastModifiedDate":"2022-09-19"},{"lineNumber":29,"author":{"gitId":"roshankumar1991"},"content":"     * @param input Provides the user-input field to be parsed.","lastModifiedDate":"2022-09-18"},{"lineNumber":30,"author":{"gitId":"roshankumar1991"},"content":"     * @throws DukeException Error if user-input is in an incompatible format.","lastModifiedDate":"2022-09-18"},{"lineNumber":31,"author":{"gitId":"roshankumar1991"},"content":"     */","lastModifiedDate":"2022-09-18"},{"lineNumber":32,"author":{"gitId":"roshankumar1991"},"content":"    public static LocalDate parse(String input) throws DukeException, IOException {","lastModifiedDate":"2022-09-19"},{"lineNumber":33,"author":{"gitId":"roshankumar1991"},"content":"        boolean change \u003d false;","lastModifiedDate":"2022-09-19"},{"lineNumber":34,"author":{"gitId":"roshankumar1991"},"content":"        if (input.trim().equalsIgnoreCase(\"bye\")) {","lastModifiedDate":"2022-09-18"},{"lineNumber":35,"author":{"gitId":"roshankumar1991"},"content":"            TaskList.Bye();","lastModifiedDate":"2022-09-18"},{"lineNumber":36,"author":{"gitId":"roshankumar1991"},"content":"        } else if (input.trim().equalsIgnoreCase(\"list\")) {","lastModifiedDate":"2022-09-18"},{"lineNumber":37,"author":{"gitId":"roshankumar1991"},"content":"            TaskList.List();","lastModifiedDate":"2022-09-18"},{"lineNumber":38,"author":{"gitId":"roshankumar1991"},"content":"        } else if (input.toLowerCase().contains(\"unmark\")) {","lastModifiedDate":"2022-09-18"},{"lineNumber":39,"author":{"gitId":"roshankumar1991"},"content":"            TaskList.Unmark(input);","lastModifiedDate":"2022-09-19"},{"lineNumber":40,"author":{"gitId":"roshankumar1991"},"content":"            change \u003d true;","lastModifiedDate":"2022-09-19"},{"lineNumber":41,"author":{"gitId":"roshankumar1991"},"content":"        } else if (input.toLowerCase().contains(\"mark\")) {","lastModifiedDate":"2022-09-18"},{"lineNumber":42,"author":{"gitId":"roshankumar1991"},"content":"            TaskList.Mark(input);","lastModifiedDate":"2022-09-18"},{"lineNumber":43,"author":{"gitId":"roshankumar1991"},"content":"            change \u003d true;","lastModifiedDate":"2022-09-19"},{"lineNumber":44,"author":{"gitId":"roshankumar1991"},"content":"        } else if (input.toLowerCase().contains(\"delete\")) {","lastModifiedDate":"2022-09-18"},{"lineNumber":45,"author":{"gitId":"roshankumar1991"},"content":"            TaskList.Delete(input);","lastModifiedDate":"2022-09-18"},{"lineNumber":46,"author":{"gitId":"roshankumar1991"},"content":"            change \u003d true;","lastModifiedDate":"2022-09-19"},{"lineNumber":47,"author":{"gitId":"roshankumar1991"},"content":"        } else if (input.toLowerCase().contains(\"todo\")) {","lastModifiedDate":"2022-09-18"},{"lineNumber":48,"author":{"gitId":"roshankumar1991"},"content":"            TaskList.Todo(input);","lastModifiedDate":"2022-09-18"},{"lineNumber":49,"author":{"gitId":"roshankumar1991"},"content":"            change \u003d true;","lastModifiedDate":"2022-09-19"},{"lineNumber":50,"author":{"gitId":"roshankumar1991"},"content":"        } else if ((input.toLowerCase().contains(\"deadline\")) || (input.toLowerCase().contains(\"event\")) ||","lastModifiedDate":"2022-09-19"},{"lineNumber":51,"author":{"gitId":"roshankumar1991"},"content":"                (input.contains(\"[D]\")) || (input.contains(\"[E]\"))) {","lastModifiedDate":"2022-09-19"},{"lineNumber":52,"author":{"gitId":"roshankumar1991"},"content":"","lastModifiedDate":"2022-09-19"},{"lineNumber":53,"author":{"gitId":"roshankumar1991"},"content":"            int n \u003d 0;","lastModifiedDate":"2022-09-19"},{"lineNumber":54,"author":{"gitId":"roshankumar1991"},"content":"","lastModifiedDate":"2022-09-19"},{"lineNumber":55,"author":{"gitId":"roshankumar1991"},"content":"            if (input.contains(\"(\")) {n \u003d input.indexOf(\u0027(\u0027); }","lastModifiedDate":"2022-09-19"},{"lineNumber":56,"author":{"gitId":"roshankumar1991"},"content":"            else if (input.contains(\"/\")) {n \u003d input.indexOf(\u0027/\u0027); }","lastModifiedDate":"2022-09-19"},{"lineNumber":57,"author":{"gitId":"roshankumar1991"},"content":"","lastModifiedDate":"2022-09-19"},{"lineNumber":58,"author":{"gitId":"roshankumar1991"},"content":"            by \u003d input.substring(n + 4).trim();","lastModifiedDate":"2022-09-19"},{"lineNumber":59,"author":{"gitId":"roshankumar1991"},"content":"            localDate \u003d LocalDate.parse(by);","lastModifiedDate":"2022-09-19"},{"lineNumber":60,"author":{"gitId":"roshankumar1991"},"content":"","lastModifiedDate":"2022-09-19"},{"lineNumber":61,"author":{"gitId":"roshankumar1991"},"content":"            if (localDate \u003d\u003d null) {","lastModifiedDate":"2022-09-19"},{"lineNumber":62,"author":{"gitId":"roshankumar1991"},"content":"                throw new DukeException(\"Either incorrect format of input or no known date format found: \" + by);","lastModifiedDate":"2022-09-19"},{"lineNumber":63,"author":{"gitId":"roshankumar1991"},"content":"            }","lastModifiedDate":"2022-09-19"},{"lineNumber":64,"author":{"gitId":"roshankumar1991"},"content":"","lastModifiedDate":"2022-09-19"},{"lineNumber":65,"author":{"gitId":"roshankumar1991"},"content":"            if (input.toLowerCase().contains(\"deadline\"))           { TaskList.Deadline(input, localDate); change \u003d true;}","lastModifiedDate":"2022-09-19"},{"lineNumber":66,"author":{"gitId":"roshankumar1991"},"content":"            else if (input.toLowerCase().contains(\"event\"))         { TaskList.Event(input,localDate); change \u003d true;}","lastModifiedDate":"2022-09-19"},{"lineNumber":67,"author":{"gitId":"roshankumar1991"},"content":"            else return localDate;","lastModifiedDate":"2022-09-19"},{"lineNumber":68,"author":{"gitId":"roshankumar1991"},"content":"        }","lastModifiedDate":"2022-09-18"},{"lineNumber":69,"author":{"gitId":"roshankumar1991"},"content":"        else throw new DukeException(\"Error: Please enter a valid task description\\n\");","lastModifiedDate":"2022-09-19"},{"lineNumber":70,"author":{"gitId":"roshankumar1991"},"content":"        if (change) { Storage.writeToFile();} //Write to file and add change to History","lastModifiedDate":"2022-09-19"},{"lineNumber":71,"author":{"gitId":"roshankumar1991"},"content":"        return null;","lastModifiedDate":"2022-09-19"},{"lineNumber":72,"author":{"gitId":"roshankumar1991"},"content":"    }","lastModifiedDate":"2022-09-18"},{"lineNumber":73,"author":{"gitId":"roshankumar1991"},"content":"}","lastModifiedDate":"2022-09-18"}],"authorContributionMap":{"roshankumar1991":73}},{"path":"src/main/java/command/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"roshankumar1991"},"content":"package command;","lastModifiedDate":"2022-09-18"},{"lineNumber":2,"author":{"gitId":"roshankumar1991"},"content":"import task.*;","lastModifiedDate":"2022-09-18"},{"lineNumber":3,"author":{"gitId":"roshankumar1991"},"content":"","lastModifiedDate":"2022-09-18"},{"lineNumber":4,"author":{"gitId":"roshankumar1991"},"content":"import java.io.File;","lastModifiedDate":"2022-09-18"},{"lineNumber":5,"author":{"gitId":"roshankumar1991"},"content":"import java.io.FileWriter;","lastModifiedDate":"2022-09-18"},{"lineNumber":6,"author":{"gitId":"roshankumar1991"},"content":"import java.io.IOException;","lastModifiedDate":"2022-09-18"},{"lineNumber":7,"author":{"gitId":"roshankumar1991"},"content":"import java.time.LocalDate;","lastModifiedDate":"2022-09-19"},{"lineNumber":8,"author":{"gitId":"roshankumar1991"},"content":"import java.util.ArrayList;","lastModifiedDate":"2022-09-18"},{"lineNumber":9,"author":{"gitId":"roshankumar1991"},"content":"import java.util.Scanner;","lastModifiedDate":"2022-09-18"},{"lineNumber":10,"author":{"gitId":"roshankumar1991"},"content":"","lastModifiedDate":"2022-09-18"},{"lineNumber":11,"author":{"gitId":"roshankumar1991"},"content":"/**","lastModifiedDate":"2022-09-19"},{"lineNumber":12,"author":{"gitId":"roshankumar1991"},"content":" * This class provides the ability to load existing task data into the \u0027TaskList\u0027 and save the latest modified \u0027TaskList\u0027 into a file.","lastModifiedDate":"2022-09-19"},{"lineNumber":13,"author":{"gitId":"roshankumar1991"},"content":" * \u003cbr\u003e It also provides some basic function to detect if the existing data is in an incompatible format and allows to throw an exception.","lastModifiedDate":"2022-09-19"},{"lineNumber":14,"author":{"gitId":"roshankumar1991"},"content":" */","lastModifiedDate":"2022-09-19"},{"lineNumber":15,"author":{"gitId":"roshankumar1991"},"content":"public class Storage {","lastModifiedDate":"2022-09-18"},{"lineNumber":16,"author":{"gitId":"roshankumar1991"},"content":"","lastModifiedDate":"2022-09-18"},{"lineNumber":17,"author":{"gitId":"roshankumar1991"},"content":"    protected static int count \u003d 0;","lastModifiedDate":"2022-09-18"},{"lineNumber":18,"author":{"gitId":"roshankumar1991"},"content":"    protected static String FileLocation \u003d FilePath.FileLocation;","lastModifiedDate":"2022-09-19"},{"lineNumber":19,"author":{"gitId":"roshankumar1991"},"content":"    protected static ArrayList\u003cTask\u003e list \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2022-09-18"},{"lineNumber":20,"author":{"gitId":"roshankumar1991"},"content":"","lastModifiedDate":"2022-09-19"},{"lineNumber":21,"author":{"gitId":"roshankumar1991"},"content":"    /**","lastModifiedDate":"2022-09-19"},{"lineNumber":22,"author":{"gitId":"roshankumar1991"},"content":"     * This method allows to read any existing file contents within the specified filepath and store its contents into \u0027TaskList\u0027.","lastModifiedDate":"2022-09-19"},{"lineNumber":23,"author":{"gitId":"roshankumar1991"},"content":"     * @param filePath The filepath for the file that the method is trying to read the data from.","lastModifiedDate":"2022-09-19"},{"lineNumber":24,"author":{"gitId":"roshankumar1991"},"content":"     * @throws DukeException Throws an error exception if the data is in an incompatible format.","lastModifiedDate":"2022-09-19"},{"lineNumber":25,"author":{"gitId":"roshankumar1991"},"content":"     * @throws IOException Signals that an I/O exception to some sort has occurred.","lastModifiedDate":"2022-09-19"},{"lineNumber":26,"author":{"gitId":"roshankumar1991"},"content":"     */","lastModifiedDate":"2022-09-19"},{"lineNumber":27,"author":{"gitId":"roshankumar1991"},"content":"    private static void printFileContents(String filePath) throws DukeException , IOException {","lastModifiedDate":"2022-09-18"},{"lineNumber":28,"author":{"gitId":"roshankumar1991"},"content":"        File f \u003d new File(filePath); // create a File for the given file path","lastModifiedDate":"2022-09-18"},{"lineNumber":29,"author":{"gitId":"roshankumar1991"},"content":"        Scanner s \u003d new Scanner(f); // create a Scanner using the File as the source","lastModifiedDate":"2022-09-18"},{"lineNumber":30,"author":{"gitId":"roshankumar1991"},"content":"        while (s.hasNext()) {","lastModifiedDate":"2022-09-18"},{"lineNumber":31,"author":{"gitId":"roshankumar1991"},"content":"            String current \u003d s.nextLine();","lastModifiedDate":"2022-09-18"},{"lineNumber":32,"author":{"gitId":"roshankumar1991"},"content":"            if (current.contains(\"[T]\")) {","lastModifiedDate":"2022-09-18"},{"lineNumber":33,"author":{"gitId":"roshankumar1991"},"content":"                String description \u003d current.substring(7);","lastModifiedDate":"2022-09-18"},{"lineNumber":34,"author":{"gitId":"roshankumar1991"},"content":"                list.add(new Todo(description));","lastModifiedDate":"2022-09-18"},{"lineNumber":35,"author":{"gitId":"roshankumar1991"},"content":"                if (current.contains(\"X\")) {","lastModifiedDate":"2022-09-18"},{"lineNumber":36,"author":{"gitId":"roshankumar1991"},"content":"                    list.get(count).setStatus(true);","lastModifiedDate":"2022-09-18"},{"lineNumber":37,"author":{"gitId":"roshankumar1991"},"content":"                }","lastModifiedDate":"2022-09-18"},{"lineNumber":38,"author":{"gitId":"roshankumar1991"},"content":"            }","lastModifiedDate":"2022-09-18"},{"lineNumber":39,"author":{"gitId":"roshankumar1991"},"content":"            else if (current.contains(\"[D]\") || current.contains(\"[E]\")) {","lastModifiedDate":"2022-09-18"},{"lineNumber":40,"author":{"gitId":"roshankumar1991"},"content":"                int m \u003d current.indexOf(\"(\");","lastModifiedDate":"2022-09-18"},{"lineNumber":41,"author":{"gitId":"roshankumar1991"},"content":"                int n \u003d current.indexOf(\")\");","lastModifiedDate":"2022-09-18"},{"lineNumber":42,"author":{"gitId":"roshankumar1991"},"content":"                String description \u003d current.substring(7,m-1);","lastModifiedDate":"2022-09-18"},{"lineNumber":43,"author":{"gitId":"roshankumar1991"},"content":"                LocalDate localDate \u003d Parser.parse(current.substring(0,n));","lastModifiedDate":"2022-09-19"},{"lineNumber":44,"author":{"gitId":"roshankumar1991"},"content":"","lastModifiedDate":"2022-09-19"},{"lineNumber":45,"author":{"gitId":"roshankumar1991"},"content":"                assert localDate !\u003d null;","lastModifiedDate":"2022-09-19"},{"lineNumber":46,"author":{"gitId":"roshankumar1991"},"content":"                if (current.contains(\"[D]\")) {","lastModifiedDate":"2022-09-18"},{"lineNumber":47,"author":{"gitId":"roshankumar1991"},"content":"                    list.add(new Deadline(description,localDate));","lastModifiedDate":"2022-09-19"},{"lineNumber":48,"author":{"gitId":"roshankumar1991"},"content":"                }","lastModifiedDate":"2022-09-18"},{"lineNumber":49,"author":{"gitId":"roshankumar1991"},"content":"                else {","lastModifiedDate":"2022-09-18"},{"lineNumber":50,"author":{"gitId":"roshankumar1991"},"content":"                    list.add(new Event(description,localDate));","lastModifiedDate":"2022-09-19"},{"lineNumber":51,"author":{"gitId":"roshankumar1991"},"content":"                }","lastModifiedDate":"2022-09-18"},{"lineNumber":52,"author":{"gitId":"roshankumar1991"},"content":"                if (current.contains(\"X\")) {","lastModifiedDate":"2022-09-18"},{"lineNumber":53,"author":{"gitId":"roshankumar1991"},"content":"                    list.get(count).setStatus(true);","lastModifiedDate":"2022-09-18"},{"lineNumber":54,"author":{"gitId":"roshankumar1991"},"content":"                }","lastModifiedDate":"2022-09-18"},{"lineNumber":55,"author":{"gitId":"roshankumar1991"},"content":"            }","lastModifiedDate":"2022-09-18"},{"lineNumber":56,"author":{"gitId":"roshankumar1991"},"content":"            else {","lastModifiedDate":"2022-09-18"},{"lineNumber":57,"author":{"gitId":"roshankumar1991"},"content":"                throw new DukeException(\"Error: Task in existing data is incompatible\\n\");","lastModifiedDate":"2022-09-18"},{"lineNumber":58,"author":{"gitId":"roshankumar1991"},"content":"            }","lastModifiedDate":"2022-09-18"},{"lineNumber":59,"author":{"gitId":"roshankumar1991"},"content":"            count++;","lastModifiedDate":"2022-09-18"},{"lineNumber":60,"author":{"gitId":"roshankumar1991"},"content":"        }","lastModifiedDate":"2022-09-18"},{"lineNumber":61,"author":{"gitId":"roshankumar1991"},"content":"    }","lastModifiedDate":"2022-09-18"},{"lineNumber":62,"author":{"gitId":"roshankumar1991"},"content":"","lastModifiedDate":"2022-09-19"},{"lineNumber":63,"author":{"gitId":"roshankumar1991"},"content":"    /**","lastModifiedDate":"2022-09-19"},{"lineNumber":64,"author":{"gitId":"roshankumar1991"},"content":"     * This method allows to store the latest modified \u0027TaskList\u0027 contents into the specified filepath. If the file or directory isn\u0027t available, it creates it automatically.","lastModifiedDate":"2022-09-19"},{"lineNumber":65,"author":{"gitId":"roshankumar1991"},"content":"     * @throws IOException Signals that an I/O exception to some sort has occurred.","lastModifiedDate":"2022-09-19"},{"lineNumber":66,"author":{"gitId":"roshankumar1991"},"content":"     */","lastModifiedDate":"2022-09-19"},{"lineNumber":67,"author":{"gitId":"roshankumar1991"},"content":"    public static void writeToFile() throws IOException {","lastModifiedDate":"2022-09-18"},{"lineNumber":68,"author":{"gitId":"roshankumar1991"},"content":"        list \u003d TaskList.UpdatedList();","lastModifiedDate":"2022-09-18"},{"lineNumber":69,"author":{"gitId":"roshankumar1991"},"content":"        FileWriter fw \u003d new FileWriter(FileLocation);","lastModifiedDate":"2022-09-19"},{"lineNumber":70,"author":{"gitId":"roshankumar1991"},"content":"        for (Task l : list) {","lastModifiedDate":"2022-09-18"},{"lineNumber":71,"author":{"gitId":"roshankumar1991"},"content":"            fw.write(l + System.lineSeparator());","lastModifiedDate":"2022-09-18"},{"lineNumber":72,"author":{"gitId":"roshankumar1991"},"content":"        }","lastModifiedDate":"2022-09-18"},{"lineNumber":73,"author":{"gitId":"roshankumar1991"},"content":"        fw.close();","lastModifiedDate":"2022-09-18"},{"lineNumber":74,"author":{"gitId":"roshankumar1991"},"content":"    }","lastModifiedDate":"2022-09-18"},{"lineNumber":75,"author":{"gitId":"roshankumar1991"},"content":"","lastModifiedDate":"2022-09-19"},{"lineNumber":76,"author":{"gitId":"roshankumar1991"},"content":"    /**","lastModifiedDate":"2022-09-19"},{"lineNumber":77,"author":{"gitId":"roshankumar1991"},"content":"     * This main method is to initialize the Storage class to begin the process of reading existing data and loading it into the \u0027TaskList\u0027.","lastModifiedDate":"2022-09-19"},{"lineNumber":78,"author":{"gitId":"roshankumar1991"},"content":"     */","lastModifiedDate":"2022-09-19"},{"lineNumber":79,"author":{"gitId":"roshankumar1991"},"content":"    public static void main() {","lastModifiedDate":"2022-09-18"},{"lineNumber":80,"author":{"gitId":"roshankumar1991"},"content":"        try {","lastModifiedDate":"2022-09-18"},{"lineNumber":81,"author":{"gitId":"roshankumar1991"},"content":"            printFileContents(FileLocation);","lastModifiedDate":"2022-09-18"},{"lineNumber":82,"author":{"gitId":"roshankumar1991"},"content":"            new TaskList(list, count); //Initialize data with existing file","lastModifiedDate":"2022-09-18"},{"lineNumber":83,"author":{"gitId":"roshankumar1991"},"content":"        } catch (DukeException | IOException e) {","lastModifiedDate":"2022-09-18"},{"lineNumber":84,"author":{"gitId":"roshankumar1991"},"content":"            System.out.println(e.getMessage());","lastModifiedDate":"2022-09-18"},{"lineNumber":85,"author":{"gitId":"roshankumar1991"},"content":"        }","lastModifiedDate":"2022-09-18"},{"lineNumber":86,"author":{"gitId":"roshankumar1991"},"content":"    }","lastModifiedDate":"2022-09-18"},{"lineNumber":87,"author":{"gitId":"roshankumar1991"},"content":"}","lastModifiedDate":"2022-09-18"}],"authorContributionMap":{"roshankumar1991":87}},{"path":"src/main/java/command/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"roshankumar1991"},"content":"package command;","lastModifiedDate":"2022-09-18"},{"lineNumber":2,"author":{"gitId":"roshankumar1991"},"content":"import task.DukeException;","lastModifiedDate":"2022-09-18"},{"lineNumber":3,"author":{"gitId":"roshankumar1991"},"content":"import task.TaskList;","lastModifiedDate":"2022-09-18"},{"lineNumber":4,"author":{"gitId":"roshankumar1991"},"content":"","lastModifiedDate":"2022-09-18"},{"lineNumber":5,"author":{"gitId":"roshankumar1991"},"content":"import java.io.IOException;","lastModifiedDate":"2022-09-18"},{"lineNumber":6,"author":{"gitId":"roshankumar1991"},"content":"import java.util.Scanner;","lastModifiedDate":"2022-09-18"},{"lineNumber":7,"author":{"gitId":"roshankumar1991"},"content":"","lastModifiedDate":"2022-09-18"},{"lineNumber":8,"author":{"gitId":"roshankumar1991"},"content":"/**","lastModifiedDate":"2022-09-19"},{"lineNumber":9,"author":{"gitId":"roshankumar1991"},"content":" * This class is to represent the user-interface of the program. It displays an introductory message and provides a list of possible commands that the user can input.","lastModifiedDate":"2022-09-19"},{"lineNumber":10,"author":{"gitId":"roshankumar1991"},"content":" * \u003cbr\u003e Once the input is registered, it refers the input to the Parser Class to parse and understand the command that the user wants.","lastModifiedDate":"2022-09-19"},{"lineNumber":11,"author":{"gitId":"roshankumar1991"},"content":" */","lastModifiedDate":"2022-09-19"},{"lineNumber":12,"author":{"gitId":"roshankumar1991"},"content":"public class Ui {","lastModifiedDate":"2022-09-18"},{"lineNumber":13,"author":{"gitId":"roshankumar1991"},"content":"    public static void command() throws IOException, DukeException {","lastModifiedDate":"2022-09-18"},{"lineNumber":14,"author":{"gitId":"roshankumar1991"},"content":"        Scanner in \u003d new Scanner(System.in);","lastModifiedDate":"2022-09-18"},{"lineNumber":15,"author":{"gitId":"roshankumar1991"},"content":"        String line \u003d in.nextLine();","lastModifiedDate":"2022-09-18"},{"lineNumber":16,"author":{"gitId":"roshankumar1991"},"content":"        Parser.parse(line);","lastModifiedDate":"2022-09-18"},{"lineNumber":17,"author":{"gitId":"roshankumar1991"},"content":"    }","lastModifiedDate":"2022-09-18"},{"lineNumber":18,"author":{"gitId":"roshankumar1991"},"content":"","lastModifiedDate":"2022-09-19"},{"lineNumber":19,"author":{"gitId":"roshankumar1991"},"content":"    /**","lastModifiedDate":"2022-09-19"},{"lineNumber":20,"author":{"gitId":"roshankumar1991"},"content":"     * This method starts the interaction with the user and asks to provide for a user-input so that it can scan the input and provide it to another class for execution purposes.","lastModifiedDate":"2022-09-19"},{"lineNumber":21,"author":{"gitId":"roshankumar1991"},"content":"     * @throws DukeException Error that is thrown if user inputs an incompatible command.","lastModifiedDate":"2022-09-19"},{"lineNumber":22,"author":{"gitId":"roshankumar1991"},"content":"     */","lastModifiedDate":"2022-09-19"},{"lineNumber":23,"author":{"gitId":"roshankumar1991"},"content":"    public static void main() throws DukeException, IOException {","lastModifiedDate":"2022-09-19"},{"lineNumber":24,"author":{"gitId":"roshankumar1991"},"content":"        System.out.println(\"Hello! I\u0027m Duke\\n\");","lastModifiedDate":"2022-09-19"},{"lineNumber":25,"author":{"gitId":"roshankumar1991"},"content":"        FilePath.main(); //Confirm current directory / file or choose a different directory / file.","lastModifiedDate":"2022-09-19"},{"lineNumber":26,"author":{"gitId":"roshankumar1991"},"content":"        if (TaskList.UpdatedList().size() \u003d\u003d 0) {","lastModifiedDate":"2022-09-18"},{"lineNumber":27,"author":{"gitId":"roshankumar1991"},"content":"            System.out.println(\"No existing data is found\");","lastModifiedDate":"2022-09-18"},{"lineNumber":28,"author":{"gitId":"roshankumar1991"},"content":"        }","lastModifiedDate":"2022-09-18"},{"lineNumber":29,"author":{"gitId":"roshankumar1991"},"content":"        else {","lastModifiedDate":"2022-09-18"},{"lineNumber":30,"author":{"gitId":"roshankumar1991"},"content":"            Parser.parse(\"list\"); //Load initial list onto screen","lastModifiedDate":"2022-09-19"},{"lineNumber":31,"author":{"gitId":"roshankumar1991"},"content":"        }","lastModifiedDate":"2022-09-18"},{"lineNumber":32,"author":{"gitId":"roshankumar1991"},"content":"        System.out.println(\"\\nWhat would you like to do ?\");","lastModifiedDate":"2022-09-19"},{"lineNumber":33,"author":{"gitId":"roshankumar1991"},"content":"        System.out.println(\"List of valid entries include the following:\\n\\n\" +","lastModifiedDate":"2022-09-19"},{"lineNumber":34,"author":{"gitId":"roshankumar1991"},"content":"                \"Bye\\n\"     +","lastModifiedDate":"2022-09-19"},{"lineNumber":35,"author":{"gitId":"roshankumar1991"},"content":"                \"List\\n\"    +","lastModifiedDate":"2022-09-19"},{"lineNumber":36,"author":{"gitId":"roshankumar1991"},"content":"                \"Mark         \u0027X\u0027\\n\" +","lastModifiedDate":"2022-09-19"},{"lineNumber":37,"author":{"gitId":"roshankumar1991"},"content":"                \"Unmark       \u0027X\u0027\\n\" +","lastModifiedDate":"2022-09-19"},{"lineNumber":38,"author":{"gitId":"roshankumar1991"},"content":"                \"Delete       \u0027X\u0027\\n\" +","lastModifiedDate":"2022-09-19"},{"lineNumber":39,"author":{"gitId":"roshankumar1991"},"content":"                \"Todo         \u0027Y\u0027\\n\" +","lastModifiedDate":"2022-09-19"},{"lineNumber":40,"author":{"gitId":"roshankumar1991"},"content":"                \"Event        \u0027Y\u0027 /at \u0027Z\u0027\\n\" +","lastModifiedDate":"2022-09-19"},{"lineNumber":41,"author":{"gitId":"roshankumar1991"},"content":"                \"Deadline     \u0027Y\u0027 /by \u0027Z\u0027\\n\" +","lastModifiedDate":"2022-09-19"},{"lineNumber":42,"author":{"gitId":"roshankumar1991"},"content":"                \"Where \u0027X\u0027 refers to the task number, \u0027Y\u0027 refers to the task description and \u0027Z\u0027 refers to the date using the format YYYY-MM-DD.\\n\");","lastModifiedDate":"2022-09-19"},{"lineNumber":43,"author":{"gitId":"roshankumar1991"},"content":"        while (true) {","lastModifiedDate":"2022-09-18"},{"lineNumber":44,"author":{"gitId":"roshankumar1991"},"content":"            try {","lastModifiedDate":"2022-09-18"},{"lineNumber":45,"author":{"gitId":"roshankumar1991"},"content":"                command();","lastModifiedDate":"2022-09-18"},{"lineNumber":46,"author":{"gitId":"roshankumar1991"},"content":"                System.out.print(\"\\n\");","lastModifiedDate":"2022-09-19"},{"lineNumber":47,"author":{"gitId":"roshankumar1991"},"content":"            } catch (DukeException | IOException e) {","lastModifiedDate":"2022-09-18"},{"lineNumber":48,"author":{"gitId":"roshankumar1991"},"content":"                System.out.println(e.getMessage());","lastModifiedDate":"2022-09-18"},{"lineNumber":49,"author":{"gitId":"roshankumar1991"},"content":"            }","lastModifiedDate":"2022-09-18"},{"lineNumber":50,"author":{"gitId":"roshankumar1991"},"content":"        }","lastModifiedDate":"2022-09-18"},{"lineNumber":51,"author":{"gitId":"roshankumar1991"},"content":"    }","lastModifiedDate":"2022-09-18"},{"lineNumber":52,"author":{"gitId":"roshankumar1991"},"content":"}","lastModifiedDate":"2022-09-18"}],"authorContributionMap":{"roshankumar1991":52}},{"path":"src/main/java/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"roshankumar1991"},"content":"package task;","lastModifiedDate":"2022-09-09"},{"lineNumber":2,"author":{"gitId":"roshankumar1991"},"content":"import java.time.LocalDate;","lastModifiedDate":"2022-09-19"},{"lineNumber":3,"author":{"gitId":"roshankumar1991"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2022-09-19"},{"lineNumber":4,"author":{"gitId":"roshankumar1991"},"content":"","lastModifiedDate":"2022-09-09"},{"lineNumber":5,"author":{"gitId":"roshankumar1991"},"content":"/**","lastModifiedDate":"2022-09-18"},{"lineNumber":6,"author":{"gitId":"roshankumar1991"},"content":" * This program is a child of the Task program. It helps add a classification to the Task program.","lastModifiedDate":"2022-09-18"},{"lineNumber":7,"author":{"gitId":"roshankumar1991"},"content":" * \u003cbr\u003eThis form of program includes a task that includes both a description and its associated completion date.","lastModifiedDate":"2022-09-18"},{"lineNumber":8,"author":{"gitId":"roshankumar1991"},"content":" */","lastModifiedDate":"2022-09-18"},{"lineNumber":9,"author":{"gitId":"roshankumar1991"},"content":"","lastModifiedDate":"2022-09-18"},{"lineNumber":10,"author":{"gitId":"roshankumar1991"},"content":"public class Deadline extends Task {","lastModifiedDate":"2022-08-19"},{"lineNumber":11,"author":{"gitId":"roshankumar1991"},"content":"    protected String formattedDateTime;","lastModifiedDate":"2022-09-19"},{"lineNumber":12,"author":{"gitId":"roshankumar1991"},"content":"    protected LocalDate localDate;","lastModifiedDate":"2022-09-19"},{"lineNumber":13,"author":{"gitId":"roshankumar1991"},"content":"    protected DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"MMM dd y\");","lastModifiedDate":"2022-09-19"},{"lineNumber":14,"author":{"gitId":"roshankumar1991"},"content":"","lastModifiedDate":"2022-08-19"},{"lineNumber":15,"author":{"gitId":"roshankumar1991"},"content":"    /**","lastModifiedDate":"2022-09-18"},{"lineNumber":16,"author":{"gitId":"roshankumar1991"},"content":"     * This method initialized a deadline task that takes in 2 parameters and creates the task.","lastModifiedDate":"2022-09-18"},{"lineNumber":17,"author":{"gitId":"roshankumar1991"},"content":"     * @param description Description of task","lastModifiedDate":"2022-09-18"},{"lineNumber":18,"author":{"gitId":"roshankumar1991"},"content":"     * @param localDate Scheduled Date of task completion","lastModifiedDate":"2022-09-19"},{"lineNumber":19,"author":{"gitId":"roshankumar1991"},"content":"     */","lastModifiedDate":"2022-09-18"},{"lineNumber":20,"author":{"gitId":"roshankumar1991"},"content":"","lastModifiedDate":"2022-09-18"},{"lineNumber":21,"author":{"gitId":"roshankumar1991"},"content":"    public Deadline(String description, LocalDate localDate) {","lastModifiedDate":"2022-09-19"},{"lineNumber":22,"author":{"gitId":"roshankumar1991"},"content":"        super(description);","lastModifiedDate":"2022-08-19"},{"lineNumber":23,"author":{"gitId":"roshankumar1991"},"content":"        this.localDate \u003d localDate;","lastModifiedDate":"2022-09-19"},{"lineNumber":24,"author":{"gitId":"roshankumar1991"},"content":"        this.formattedDateTime \u003d localDate.format(formatter);","lastModifiedDate":"2022-09-19"},{"lineNumber":25,"author":{"gitId":"roshankumar1991"},"content":"    }","lastModifiedDate":"2022-08-19"},{"lineNumber":26,"author":{"gitId":"roshankumar1991"},"content":"","lastModifiedDate":"2022-08-19"},{"lineNumber":27,"author":{"gitId":"roshankumar1991"},"content":"    /**","lastModifiedDate":"2022-09-18"},{"lineNumber":28,"author":{"gitId":"roshankumar1991"},"content":"     * This method provides a String format return for the event task.","lastModifiedDate":"2022-09-18"},{"lineNumber":29,"author":{"gitId":"roshankumar1991"},"content":"     * @return Returns a String in the unique format specified in the method.","lastModifiedDate":"2022-09-18"},{"lineNumber":30,"author":{"gitId":"roshankumar1991"},"content":"     */","lastModifiedDate":"2022-09-18"},{"lineNumber":31,"author":{"gitId":"roshankumar1991"},"content":"","lastModifiedDate":"2022-09-18"},{"lineNumber":32,"author":{"gitId":"roshankumar1991"},"content":"    @Override","lastModifiedDate":"2022-08-19"},{"lineNumber":33,"author":{"gitId":"roshankumar1991"},"content":"    public String toString() {","lastModifiedDate":"2022-08-19"},{"lineNumber":34,"author":{"gitId":"roshankumar1991"},"content":"        return \"[D]\" + \"[\" + getStatusIcon() + \"] \" + getDescription() + \" (by: \" + formattedDateTime + \")\";","lastModifiedDate":"2022-09-19"},{"lineNumber":35,"author":{"gitId":"roshankumar1991"},"content":"    }","lastModifiedDate":"2022-08-19"},{"lineNumber":36,"author":{"gitId":"roshankumar1991"},"content":"}","lastModifiedDate":"2022-08-19"},{"lineNumber":37,"author":{"gitId":"roshankumar1991"},"content":"","lastModifiedDate":"2022-08-19"}],"authorContributionMap":{"roshankumar1991":37}},{"path":"src/main/java/task/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"roshankumar1991"},"content":"package task;","lastModifiedDate":"2022-09-18"},{"lineNumber":2,"author":{"gitId":"roshankumar1991"},"content":"","lastModifiedDate":"2022-09-09"},{"lineNumber":3,"author":{"gitId":"roshankumar1991"},"content":"/**","lastModifiedDate":"2022-09-18"},{"lineNumber":4,"author":{"gitId":"roshankumar1991"},"content":" * This class is to provide for a customized Error message that is usually thrown when an incompatible user-input is provided.","lastModifiedDate":"2022-09-18"},{"lineNumber":5,"author":{"gitId":"roshankumar1991"},"content":" */","lastModifiedDate":"2022-09-18"},{"lineNumber":6,"author":{"gitId":"roshankumar1991"},"content":"","lastModifiedDate":"2022-09-18"},{"lineNumber":7,"author":{"gitId":"roshankumar1991"},"content":"public class DukeException extends Exception{","lastModifiedDate":"2022-08-28"},{"lineNumber":8,"author":{"gitId":"roshankumar1991"},"content":"    public DukeException(String message) {","lastModifiedDate":"2022-08-28"},{"lineNumber":9,"author":{"gitId":"roshankumar1991"},"content":"        super(message);","lastModifiedDate":"2022-08-28"},{"lineNumber":10,"author":{"gitId":"roshankumar1991"},"content":"    }","lastModifiedDate":"2022-08-28"},{"lineNumber":11,"author":{"gitId":"roshankumar1991"},"content":"}","lastModifiedDate":"2022-08-28"}],"authorContributionMap":{"roshankumar1991":11}},{"path":"src/main/java/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"roshankumar1991"},"content":"package task;","lastModifiedDate":"2022-09-09"},{"lineNumber":2,"author":{"gitId":"roshankumar1991"},"content":"import java.time.LocalDate;","lastModifiedDate":"2022-09-19"},{"lineNumber":3,"author":{"gitId":"roshankumar1991"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2022-09-19"},{"lineNumber":4,"author":{"gitId":"roshankumar1991"},"content":"","lastModifiedDate":"2022-09-09"},{"lineNumber":5,"author":{"gitId":"roshankumar1991"},"content":"/**","lastModifiedDate":"2022-09-18"},{"lineNumber":6,"author":{"gitId":"roshankumar1991"},"content":" * This program is a child of the Task program. It helps add a classification to the Task program.","lastModifiedDate":"2022-09-18"},{"lineNumber":7,"author":{"gitId":"roshankumar1991"},"content":" * \u003cbr\u003eThis form of program includes a task that includes both a description and its associated completion date.","lastModifiedDate":"2022-09-18"},{"lineNumber":8,"author":{"gitId":"roshankumar1991"},"content":" */","lastModifiedDate":"2022-09-18"},{"lineNumber":9,"author":{"gitId":"roshankumar1991"},"content":"","lastModifiedDate":"2022-09-18"},{"lineNumber":10,"author":{"gitId":"roshankumar1991"},"content":"public class Event extends Task {","lastModifiedDate":"2022-08-19"},{"lineNumber":11,"author":{"gitId":"roshankumar1991"},"content":"    protected String formattedDateTime;","lastModifiedDate":"2022-09-19"},{"lineNumber":12,"author":{"gitId":"roshankumar1991"},"content":"    protected LocalDate localDate;","lastModifiedDate":"2022-09-19"},{"lineNumber":13,"author":{"gitId":"roshankumar1991"},"content":"    protected DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"MMM dd y\");","lastModifiedDate":"2022-09-19"},{"lineNumber":14,"author":{"gitId":"roshankumar1991"},"content":"","lastModifiedDate":"2022-08-19"},{"lineNumber":15,"author":{"gitId":"roshankumar1991"},"content":"    /**","lastModifiedDate":"2022-09-18"},{"lineNumber":16,"author":{"gitId":"roshankumar1991"},"content":"     * This method initialized an event task that takes in 2 parameters and creates the task.","lastModifiedDate":"2022-09-18"},{"lineNumber":17,"author":{"gitId":"roshankumar1991"},"content":"     * @param description Description of task","lastModifiedDate":"2022-09-18"},{"lineNumber":18,"author":{"gitId":"roshankumar1991"},"content":"     * @param localDate Scheduled Date of task completion","lastModifiedDate":"2022-09-19"},{"lineNumber":19,"author":{"gitId":"roshankumar1991"},"content":"     */","lastModifiedDate":"2022-09-18"},{"lineNumber":20,"author":{"gitId":"roshankumar1991"},"content":"","lastModifiedDate":"2022-09-18"},{"lineNumber":21,"author":{"gitId":"roshankumar1991"},"content":"    public Event(String description, LocalDate localDate) {","lastModifiedDate":"2022-09-19"},{"lineNumber":22,"author":{"gitId":"roshankumar1991"},"content":"        super(description);","lastModifiedDate":"2022-08-19"},{"lineNumber":23,"author":{"gitId":"roshankumar1991"},"content":"        this.localDate \u003d localDate;","lastModifiedDate":"2022-09-19"},{"lineNumber":24,"author":{"gitId":"roshankumar1991"},"content":"        this.formattedDateTime \u003d localDate.format(formatter);","lastModifiedDate":"2022-09-19"},{"lineNumber":25,"author":{"gitId":"roshankumar1991"},"content":"    }","lastModifiedDate":"2022-08-19"},{"lineNumber":26,"author":{"gitId":"roshankumar1991"},"content":"","lastModifiedDate":"2022-08-19"},{"lineNumber":27,"author":{"gitId":"roshankumar1991"},"content":"    /**","lastModifiedDate":"2022-09-18"},{"lineNumber":28,"author":{"gitId":"roshankumar1991"},"content":"     * This method provides a String format return for the event task.","lastModifiedDate":"2022-09-18"},{"lineNumber":29,"author":{"gitId":"roshankumar1991"},"content":"     * @return Returns a String in the unique format specified in the method.","lastModifiedDate":"2022-09-18"},{"lineNumber":30,"author":{"gitId":"roshankumar1991"},"content":"     */","lastModifiedDate":"2022-09-18"},{"lineNumber":31,"author":{"gitId":"roshankumar1991"},"content":"","lastModifiedDate":"2022-09-18"},{"lineNumber":32,"author":{"gitId":"roshankumar1991"},"content":"    @Override","lastModifiedDate":"2022-08-19"},{"lineNumber":33,"author":{"gitId":"roshankumar1991"},"content":"    public String toString() {","lastModifiedDate":"2022-08-19"},{"lineNumber":34,"author":{"gitId":"roshankumar1991"},"content":"        return \"[E]\" + \"[\" + getStatusIcon() + \"] \" + getDescription() + \" (at: \" + formattedDateTime + \")\";","lastModifiedDate":"2022-09-19"},{"lineNumber":35,"author":{"gitId":"roshankumar1991"},"content":"    }","lastModifiedDate":"2022-08-19"},{"lineNumber":36,"author":{"gitId":"roshankumar1991"},"content":"}","lastModifiedDate":"2022-08-19"}],"authorContributionMap":{"roshankumar1991":36}},{"path":"src/main/java/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"roshankumar1991"},"content":"package task;","lastModifiedDate":"2022-09-09"},{"lineNumber":2,"author":{"gitId":"roshankumar1991"},"content":"","lastModifiedDate":"2022-09-09"},{"lineNumber":3,"author":{"gitId":"roshankumar1991"},"content":"/**","lastModifiedDate":"2022-09-18"},{"lineNumber":4,"author":{"gitId":"roshankumar1991"},"content":" * This Task program defines the basic structure for a Task class. It contains the following key components:","lastModifiedDate":"2022-09-18"},{"lineNumber":5,"author":{"gitId":"roshankumar1991"},"content":" *  1. Description","lastModifiedDate":"2022-09-18"},{"lineNumber":6,"author":{"gitId":"roshankumar1991"},"content":" *  2. isDone Status (Whether task is completed / not completed)","lastModifiedDate":"2022-09-18"},{"lineNumber":7,"author":{"gitId":"roshankumar1991"},"content":" * It also contains the basic constructor, a getter and a setter method.","lastModifiedDate":"2022-09-18"},{"lineNumber":8,"author":{"gitId":"roshankumar1991"},"content":" */","lastModifiedDate":"2022-09-18"},{"lineNumber":9,"author":{"gitId":"roshankumar1991"},"content":"","lastModifiedDate":"2022-09-18"},{"lineNumber":10,"author":{"gitId":"roshankumar1991"},"content":"public abstract class Task {","lastModifiedDate":"2022-09-09"},{"lineNumber":11,"author":{"gitId":"roshankumar1991"},"content":"    public String description;","lastModifiedDate":"2022-09-09"},{"lineNumber":12,"author":{"gitId":"roshankumar1991"},"content":"    protected boolean isDone;","lastModifiedDate":"2022-08-19"},{"lineNumber":13,"author":{"gitId":"roshankumar1991"},"content":"","lastModifiedDate":"2022-08-19"},{"lineNumber":14,"author":{"gitId":"roshankumar1991"},"content":"    /**","lastModifiedDate":"2022-09-18"},{"lineNumber":15,"author":{"gitId":"roshankumar1991"},"content":"     * This method is used to initialize the Task Class using a String description as a variable.","lastModifiedDate":"2022-09-18"},{"lineNumber":16,"author":{"gitId":"roshankumar1991"},"content":"     * @param description Registers the description of the Task.","lastModifiedDate":"2022-09-18"},{"lineNumber":17,"author":{"gitId":"roshankumar1991"},"content":"     */","lastModifiedDate":"2022-09-18"},{"lineNumber":18,"author":{"gitId":"roshankumar1991"},"content":"","lastModifiedDate":"2022-09-18"},{"lineNumber":19,"author":{"gitId":"roshankumar1991"},"content":"    public Task(String description) {","lastModifiedDate":"2022-08-19"},{"lineNumber":20,"author":{"gitId":"roshankumar1991"},"content":"        this.description \u003d description;","lastModifiedDate":"2022-08-19"},{"lineNumber":21,"author":{"gitId":"roshankumar1991"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2022-08-19"},{"lineNumber":22,"author":{"gitId":"roshankumar1991"},"content":"    }","lastModifiedDate":"2022-08-19"},{"lineNumber":23,"author":{"gitId":"roshankumar1991"},"content":"","lastModifiedDate":"2022-08-19"},{"lineNumber":24,"author":{"gitId":"roshankumar1991"},"content":"    /**","lastModifiedDate":"2022-09-18"},{"lineNumber":25,"author":{"gitId":"roshankumar1991"},"content":"     * This method is used to retrieve the status of a task (Completed / Not completed).","lastModifiedDate":"2022-09-18"},{"lineNumber":26,"author":{"gitId":"roshankumar1991"},"content":"     * @return Returns either an X or blank symbol representing the task completion status.","lastModifiedDate":"2022-09-18"},{"lineNumber":27,"author":{"gitId":"roshankumar1991"},"content":"     */","lastModifiedDate":"2022-09-18"},{"lineNumber":28,"author":{"gitId":"roshankumar1991"},"content":"","lastModifiedDate":"2022-09-18"},{"lineNumber":29,"author":{"gitId":"roshankumar1991"},"content":"    public String getStatusIcon() {","lastModifiedDate":"2022-08-19"},{"lineNumber":30,"author":{"gitId":"roshankumar1991"},"content":"","lastModifiedDate":"2022-09-18"},{"lineNumber":31,"author":{"gitId":"roshankumar1991"},"content":"        return (isDone ? \"X\" : \" \"); //return X or blank symbol","lastModifiedDate":"2022-09-18"},{"lineNumber":32,"author":{"gitId":"roshankumar1991"},"content":"    }","lastModifiedDate":"2022-08-19"},{"lineNumber":33,"author":{"gitId":"roshankumar1991"},"content":"    /**","lastModifiedDate":"2022-09-18"},{"lineNumber":34,"author":{"gitId":"roshankumar1991"},"content":"     * This method is used to get the description of a task","lastModifiedDate":"2022-09-18"},{"lineNumber":35,"author":{"gitId":"roshankumar1991"},"content":"     * * @return Returns description of task","lastModifiedDate":"2022-09-18"},{"lineNumber":36,"author":{"gitId":"roshankumar1991"},"content":"     */","lastModifiedDate":"2022-09-18"},{"lineNumber":37,"author":{"gitId":"roshankumar1991"},"content":"","lastModifiedDate":"2022-08-19"},{"lineNumber":38,"author":{"gitId":"roshankumar1991"},"content":"    public String getDescription() {","lastModifiedDate":"2022-09-09"},{"lineNumber":39,"author":{"gitId":"roshankumar1991"},"content":"        return description;","lastModifiedDate":"2022-09-09"},{"lineNumber":40,"author":{"gitId":"roshankumar1991"},"content":"    }","lastModifiedDate":"2022-09-09"},{"lineNumber":41,"author":{"gitId":"roshankumar1991"},"content":"","lastModifiedDate":"2022-09-09"},{"lineNumber":42,"author":{"gitId":"roshankumar1991"},"content":"    /**","lastModifiedDate":"2022-09-18"},{"lineNumber":43,"author":{"gitId":"roshankumar1991"},"content":"     * This method is used to set the status of a task (Completed / Not completed).","lastModifiedDate":"2022-09-18"},{"lineNumber":44,"author":{"gitId":"roshankumar1991"},"content":"     */","lastModifiedDate":"2022-09-18"},{"lineNumber":45,"author":{"gitId":"roshankumar1991"},"content":"    public void setStatus(boolean isDone) {","lastModifiedDate":"2022-08-19"},{"lineNumber":46,"author":{"gitId":"roshankumar1991"},"content":"        this.isDone \u003d isDone;","lastModifiedDate":"2022-08-19"},{"lineNumber":47,"author":{"gitId":"roshankumar1991"},"content":"    }","lastModifiedDate":"2022-08-19"},{"lineNumber":48,"author":{"gitId":"roshankumar1991"},"content":"","lastModifiedDate":"2022-08-19"},{"lineNumber":49,"author":{"gitId":"roshankumar1991"},"content":"    /**","lastModifiedDate":"2022-09-18"},{"lineNumber":50,"author":{"gitId":"roshankumar1991"},"content":"     * This abstract method is used to return the String output of the Task is a specified manner.","lastModifiedDate":"2022-09-18"},{"lineNumber":51,"author":{"gitId":"roshankumar1991"},"content":"     */","lastModifiedDate":"2022-09-18"},{"lineNumber":52,"author":{"gitId":"roshankumar1991"},"content":"    public abstract String toString();","lastModifiedDate":"2022-09-09"},{"lineNumber":53,"author":{"gitId":"roshankumar1991"},"content":"}","lastModifiedDate":"2022-08-19"}],"authorContributionMap":{"roshankumar1991":53}},{"path":"src/main/java/task/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"roshankumar1991"},"content":"package task;","lastModifiedDate":"2022-09-18"},{"lineNumber":2,"author":{"gitId":"roshankumar1991"},"content":"import java.time.LocalDate;","lastModifiedDate":"2022-09-19"},{"lineNumber":3,"author":{"gitId":"roshankumar1991"},"content":"import java.util.ArrayList;","lastModifiedDate":"2022-09-18"},{"lineNumber":4,"author":{"gitId":"roshankumar1991"},"content":"","lastModifiedDate":"2022-09-18"},{"lineNumber":5,"author":{"gitId":"roshankumar1991"},"content":"/**","lastModifiedDate":"2022-09-19"},{"lineNumber":6,"author":{"gitId":"roshankumar1991"},"content":" * This class is used for evaluating the actions of the multiple user commands such as add / delete tasks etc.","lastModifiedDate":"2022-09-19"},{"lineNumber":7,"author":{"gitId":"roshankumar1991"},"content":" * \u003cbr\u003e It contains the following approved actions:","lastModifiedDate":"2022-09-19"},{"lineNumber":8,"author":{"gitId":"roshankumar1991"},"content":" * \u003col\u003e","lastModifiedDate":"2022-09-19"},{"lineNumber":9,"author":{"gitId":"roshankumar1991"},"content":" *     \u003cli\u003eList: Allows to list all the tasks inside TaskList\u003c/li\u003e","lastModifiedDate":"2022-09-19"},{"lineNumber":10,"author":{"gitId":"roshankumar1991"},"content":" *     \u003cli\u003eBye: Exits the Task Manager\u003c/li\u003e","lastModifiedDate":"2022-09-19"},{"lineNumber":11,"author":{"gitId":"roshankumar1991"},"content":" *     \u003cli\u003eUnmark: Marks a task as not completed\u003c/li\u003e","lastModifiedDate":"2022-09-19"},{"lineNumber":12,"author":{"gitId":"roshankumar1991"},"content":" *     \u003cli\u003eMark: Marks a task as completed\u003c/li\u003e","lastModifiedDate":"2022-09-19"},{"lineNumber":13,"author":{"gitId":"roshankumar1991"},"content":" *     \u003cli\u003eDelete: Deletes a task from the TaskList\u003c/li\u003e","lastModifiedDate":"2022-09-19"},{"lineNumber":14,"author":{"gitId":"roshankumar1991"},"content":" *     \u003cli\u003eTodo / Event / Deadline: Adds one of the following tasks into the TaskList\u003c/li\u003e","lastModifiedDate":"2022-09-19"},{"lineNumber":15,"author":{"gitId":"roshankumar1991"},"content":" * \u003c/ol\u003e","lastModifiedDate":"2022-09-19"},{"lineNumber":16,"author":{"gitId":"roshankumar1991"},"content":" */","lastModifiedDate":"2022-09-19"},{"lineNumber":17,"author":{"gitId":"roshankumar1991"},"content":"public class TaskList {","lastModifiedDate":"2022-09-18"},{"lineNumber":18,"author":{"gitId":"roshankumar1991"},"content":"    protected static int count;","lastModifiedDate":"2022-09-18"},{"lineNumber":19,"author":{"gitId":"roshankumar1991"},"content":"    protected static ArrayList\u003cTask\u003e list;","lastModifiedDate":"2022-09-18"},{"lineNumber":20,"author":{"gitId":"roshankumar1991"},"content":"","lastModifiedDate":"2022-09-19"},{"lineNumber":21,"author":{"gitId":"roshankumar1991"},"content":"    /**","lastModifiedDate":"2022-09-19"},{"lineNumber":22,"author":{"gitId":"roshankumar1991"},"content":"     * This method initializes the TaskList ArrayList.","lastModifiedDate":"2022-09-19"},{"lineNumber":23,"author":{"gitId":"roshankumar1991"},"content":"     * @param list Provides the list of tasks","lastModifiedDate":"2022-09-19"},{"lineNumber":24,"author":{"gitId":"roshankumar1991"},"content":"     * @param count Provides how many tasks have been added","lastModifiedDate":"2022-09-19"},{"lineNumber":25,"author":{"gitId":"roshankumar1991"},"content":"     */","lastModifiedDate":"2022-09-19"},{"lineNumber":26,"author":{"gitId":"roshankumar1991"},"content":"    public TaskList(ArrayList\u003cTask\u003e list, int count) {","lastModifiedDate":"2022-09-18"},{"lineNumber":27,"author":{"gitId":"roshankumar1991"},"content":"        TaskList.count \u003d count;","lastModifiedDate":"2022-09-18"},{"lineNumber":28,"author":{"gitId":"roshankumar1991"},"content":"        TaskList.list \u003d list;","lastModifiedDate":"2022-09-18"},{"lineNumber":29,"author":{"gitId":"roshankumar1991"},"content":"    }","lastModifiedDate":"2022-09-18"},{"lineNumber":30,"author":{"gitId":"roshankumar1991"},"content":"","lastModifiedDate":"2022-09-19"},{"lineNumber":31,"author":{"gitId":"roshankumar1991"},"content":"    /**","lastModifiedDate":"2022-09-19"},{"lineNumber":32,"author":{"gitId":"roshankumar1991"},"content":"     * This method is to retrieve the updated TaskList.","lastModifiedDate":"2022-09-19"},{"lineNumber":33,"author":{"gitId":"roshankumar1991"},"content":"     * @return Returns the latest updated TaskList.","lastModifiedDate":"2022-09-19"},{"lineNumber":34,"author":{"gitId":"roshankumar1991"},"content":"     */","lastModifiedDate":"2022-09-19"},{"lineNumber":35,"author":{"gitId":"roshankumar1991"},"content":"    public static ArrayList\u003cTask\u003e UpdatedList() {","lastModifiedDate":"2022-09-18"},{"lineNumber":36,"author":{"gitId":"roshankumar1991"},"content":"        return list;","lastModifiedDate":"2022-09-18"},{"lineNumber":37,"author":{"gitId":"roshankumar1991"},"content":"    }","lastModifiedDate":"2022-09-18"},{"lineNumber":38,"author":{"gitId":"roshankumar1991"},"content":"    public static void List() throws DukeException {","lastModifiedDate":"2022-09-18"},{"lineNumber":39,"author":{"gitId":"roshankumar1991"},"content":"        if (count \u003d\u003d 0) {","lastModifiedDate":"2022-09-18"},{"lineNumber":40,"author":{"gitId":"roshankumar1991"},"content":"            throw new DukeException(\"There are no items currently in the list\\n\");","lastModifiedDate":"2022-09-18"},{"lineNumber":41,"author":{"gitId":"roshankumar1991"},"content":"        }","lastModifiedDate":"2022-09-18"},{"lineNumber":42,"author":{"gitId":"roshankumar1991"},"content":"        System.out.println(\"Here are the tasks in your list:\\n\");","lastModifiedDate":"2022-09-18"},{"lineNumber":43,"author":{"gitId":"roshankumar1991"},"content":"        int seq \u003d 1;","lastModifiedDate":"2022-09-18"},{"lineNumber":44,"author":{"gitId":"roshankumar1991"},"content":"        for (Task l : list) {","lastModifiedDate":"2022-09-18"},{"lineNumber":45,"author":{"gitId":"roshankumar1991"},"content":"            System.out.println(seq + \". \" + l);","lastModifiedDate":"2022-09-18"},{"lineNumber":46,"author":{"gitId":"roshankumar1991"},"content":"            seq++;","lastModifiedDate":"2022-09-18"},{"lineNumber":47,"author":{"gitId":"roshankumar1991"},"content":"        }","lastModifiedDate":"2022-09-18"},{"lineNumber":48,"author":{"gitId":"roshankumar1991"},"content":"    }","lastModifiedDate":"2022-09-18"},{"lineNumber":49,"author":{"gitId":"roshankumar1991"},"content":"","lastModifiedDate":"2022-09-24"},{"lineNumber":50,"author":{"gitId":"roshankumar1991"},"content":"    /**","lastModifiedDate":"2022-09-19"},{"lineNumber":51,"author":{"gitId":"roshankumar1991"},"content":"     * This method helps to exit from the Task Manager.","lastModifiedDate":"2022-09-19"},{"lineNumber":52,"author":{"gitId":"roshankumar1991"},"content":"     */","lastModifiedDate":"2022-09-19"},{"lineNumber":53,"author":{"gitId":"roshankumar1991"},"content":"","lastModifiedDate":"2022-09-18"},{"lineNumber":54,"author":{"gitId":"roshankumar1991"},"content":"    public static void Bye() {","lastModifiedDate":"2022-09-18"},{"lineNumber":55,"author":{"gitId":"roshankumar1991"},"content":"        System.out.println(\"Bye. Hope to see you again soon!\");","lastModifiedDate":"2022-09-18"},{"lineNumber":56,"author":{"gitId":"roshankumar1991"},"content":"        System.exit(0);","lastModifiedDate":"2022-09-18"},{"lineNumber":57,"author":{"gitId":"roshankumar1991"},"content":"    }","lastModifiedDate":"2022-09-18"},{"lineNumber":58,"author":{"gitId":"roshankumar1991"},"content":"","lastModifiedDate":"2022-09-18"},{"lineNumber":59,"author":{"gitId":"roshankumar1991"},"content":"    /**","lastModifiedDate":"2022-09-19"},{"lineNumber":60,"author":{"gitId":"roshankumar1991"},"content":"     * This task helps to mark a task as completed.","lastModifiedDate":"2022-09-19"},{"lineNumber":61,"author":{"gitId":"roshankumar1991"},"content":"     * @param line Provide details into which task is to be marked as completed.","lastModifiedDate":"2022-09-19"},{"lineNumber":62,"author":{"gitId":"roshankumar1991"},"content":"     * @throws DukeException Throws various exceptions if the user-input is invalid.","lastModifiedDate":"2022-09-19"},{"lineNumber":63,"author":{"gitId":"roshankumar1991"},"content":"     */","lastModifiedDate":"2022-09-19"},{"lineNumber":64,"author":{"gitId":"roshankumar1991"},"content":"","lastModifiedDate":"2022-09-19"},{"lineNumber":65,"author":{"gitId":"roshankumar1991"},"content":"    public static void Mark(String line) throws DukeException {","lastModifiedDate":"2022-09-18"},{"lineNumber":66,"author":{"gitId":"roshankumar1991"},"content":"        int m \u003d line.toLowerCase().indexOf(\"mark\");","lastModifiedDate":"2022-09-18"},{"lineNumber":67,"author":{"gitId":"roshankumar1991"},"content":"        String num \u003d line.substring(m+4).trim();","lastModifiedDate":"2022-09-18"},{"lineNumber":68,"author":{"gitId":"roshankumar1991"},"content":"        if (num.length() \u003c 1) {","lastModifiedDate":"2022-09-18"},{"lineNumber":69,"author":{"gitId":"roshankumar1991"},"content":"            throw new DukeException(\"Error: Please enter which task is done\\n\");","lastModifiedDate":"2022-09-18"},{"lineNumber":70,"author":{"gitId":"roshankumar1991"},"content":"        }","lastModifiedDate":"2022-09-18"},{"lineNumber":71,"author":{"gitId":"roshankumar1991"},"content":"        int n \u003d Integer.parseInt(num);","lastModifiedDate":"2022-09-18"},{"lineNumber":72,"author":{"gitId":"roshankumar1991"},"content":"        if (n \u003e count) {","lastModifiedDate":"2022-09-18"},{"lineNumber":73,"author":{"gitId":"roshankumar1991"},"content":"            throw new DukeException(\"Error: Please enter a valid task number\\n\");","lastModifiedDate":"2022-09-18"},{"lineNumber":74,"author":{"gitId":"roshankumar1991"},"content":"        }","lastModifiedDate":"2022-09-18"},{"lineNumber":75,"author":{"gitId":"roshankumar1991"},"content":"        if (list.get(n-1).getStatusIcon().equals(\"X\")) {","lastModifiedDate":"2022-09-18"},{"lineNumber":76,"author":{"gitId":"roshankumar1991"},"content":"            throw new DukeException(\"Error: task.Task has already been marked\\n\");","lastModifiedDate":"2022-09-18"},{"lineNumber":77,"author":{"gitId":"roshankumar1991"},"content":"        }","lastModifiedDate":"2022-09-18"},{"lineNumber":78,"author":{"gitId":"roshankumar1991"},"content":"        else {","lastModifiedDate":"2022-09-18"},{"lineNumber":79,"author":{"gitId":"roshankumar1991"},"content":"            System.out.println(\"Nice! I\u0027ve marked this task as done:\");","lastModifiedDate":"2022-09-18"},{"lineNumber":80,"author":{"gitId":"roshankumar1991"},"content":"            list.get(n-1).setStatus(true);","lastModifiedDate":"2022-09-18"},{"lineNumber":81,"author":{"gitId":"roshankumar1991"},"content":"            System.out.println(list.get(n-1) + \"\\n\");","lastModifiedDate":"2022-09-18"},{"lineNumber":82,"author":{"gitId":"roshankumar1991"},"content":"        }","lastModifiedDate":"2022-09-18"},{"lineNumber":83,"author":{"gitId":"roshankumar1991"},"content":"    }","lastModifiedDate":"2022-09-18"},{"lineNumber":84,"author":{"gitId":"roshankumar1991"},"content":"","lastModifiedDate":"2022-09-18"},{"lineNumber":85,"author":{"gitId":"roshankumar1991"},"content":"    public static void Unmark(String line) throws DukeException {","lastModifiedDate":"2022-09-18"},{"lineNumber":86,"author":{"gitId":"roshankumar1991"},"content":"        int m \u003d line.toLowerCase().indexOf(\"unmark\");","lastModifiedDate":"2022-09-18"},{"lineNumber":87,"author":{"gitId":"roshankumar1991"},"content":"        String num \u003d line.substring(m+6).trim();","lastModifiedDate":"2022-09-19"},{"lineNumber":88,"author":{"gitId":"roshankumar1991"},"content":"        if (num.length() \u003c 1) {","lastModifiedDate":"2022-09-18"},{"lineNumber":89,"author":{"gitId":"roshankumar1991"},"content":"            throw new DukeException(\"Error: Please enter which task to unmark\\n\");","lastModifiedDate":"2022-09-18"},{"lineNumber":90,"author":{"gitId":"roshankumar1991"},"content":"        }","lastModifiedDate":"2022-09-18"},{"lineNumber":91,"author":{"gitId":"roshankumar1991"},"content":"        int n \u003d Integer.parseInt(num);","lastModifiedDate":"2022-09-18"},{"lineNumber":92,"author":{"gitId":"roshankumar1991"},"content":"        if (n \u003e count) throw new DukeException(\"Error: Please enter a valid task number\\n\");","lastModifiedDate":"2022-09-18"},{"lineNumber":93,"author":{"gitId":"roshankumar1991"},"content":"        if (list.get(n-1).getStatusIcon().equals(\" \")) {","lastModifiedDate":"2022-09-18"},{"lineNumber":94,"author":{"gitId":"roshankumar1991"},"content":"            throw new DukeException(\"Error: task.Task has already been unmarked\\n\");","lastModifiedDate":"2022-09-18"},{"lineNumber":95,"author":{"gitId":"roshankumar1991"},"content":"        }","lastModifiedDate":"2022-09-18"},{"lineNumber":96,"author":{"gitId":"roshankumar1991"},"content":"        else {","lastModifiedDate":"2022-09-18"},{"lineNumber":97,"author":{"gitId":"roshankumar1991"},"content":"            System.out.println(\"OK, I\u0027ve marked this task as not done yet:\");","lastModifiedDate":"2022-09-18"},{"lineNumber":98,"author":{"gitId":"roshankumar1991"},"content":"            list.get(n-1).setStatus(false);","lastModifiedDate":"2022-09-18"},{"lineNumber":99,"author":{"gitId":"roshankumar1991"},"content":"            System.out.println(list.get(n-1) + \"\\n\");","lastModifiedDate":"2022-09-18"},{"lineNumber":100,"author":{"gitId":"roshankumar1991"},"content":"        }","lastModifiedDate":"2022-09-18"},{"lineNumber":101,"author":{"gitId":"roshankumar1991"},"content":"    }","lastModifiedDate":"2022-09-18"},{"lineNumber":102,"author":{"gitId":"roshankumar1991"},"content":"","lastModifiedDate":"2022-09-18"},{"lineNumber":103,"author":{"gitId":"roshankumar1991"},"content":"    /**","lastModifiedDate":"2022-09-19"},{"lineNumber":104,"author":{"gitId":"roshankumar1991"},"content":"     * This task helps to delete a task.","lastModifiedDate":"2022-09-19"},{"lineNumber":105,"author":{"gitId":"roshankumar1991"},"content":"     * @param line Provide details into which task is to be deleted.","lastModifiedDate":"2022-09-19"},{"lineNumber":106,"author":{"gitId":"roshankumar1991"},"content":"     * @throws DukeException Throws various exceptions if the user-input is invalid.","lastModifiedDate":"2022-09-19"},{"lineNumber":107,"author":{"gitId":"roshankumar1991"},"content":"     */","lastModifiedDate":"2022-09-19"},{"lineNumber":108,"author":{"gitId":"roshankumar1991"},"content":"","lastModifiedDate":"2022-09-19"},{"lineNumber":109,"author":{"gitId":"roshankumar1991"},"content":"    public static void Delete(String line) throws DukeException {","lastModifiedDate":"2022-09-18"},{"lineNumber":110,"author":{"gitId":"roshankumar1991"},"content":"        int m \u003d line.toLowerCase().indexOf(\"delete\");","lastModifiedDate":"2022-09-18"},{"lineNumber":111,"author":{"gitId":"roshankumar1991"},"content":"        String num \u003d line.substring(m + 6).trim();","lastModifiedDate":"2022-09-18"},{"lineNumber":112,"author":{"gitId":"roshankumar1991"},"content":"        if (num.length() \u003c 1) {","lastModifiedDate":"2022-09-18"},{"lineNumber":113,"author":{"gitId":"roshankumar1991"},"content":"            throw new DukeException(\"Error: Please enter which task to be deleted\\n\");","lastModifiedDate":"2022-09-18"},{"lineNumber":114,"author":{"gitId":"roshankumar1991"},"content":"        }","lastModifiedDate":"2022-09-18"},{"lineNumber":115,"author":{"gitId":"roshankumar1991"},"content":"        int n \u003d Integer.parseInt(num);","lastModifiedDate":"2022-09-18"},{"lineNumber":116,"author":{"gitId":"roshankumar1991"},"content":"        if (n \u003e count) {","lastModifiedDate":"2022-09-18"},{"lineNumber":117,"author":{"gitId":"roshankumar1991"},"content":"            throw new DukeException(\"Error: Please enter a valid task number\\n\");","lastModifiedDate":"2022-09-18"},{"lineNumber":118,"author":{"gitId":"roshankumar1991"},"content":"        } else {","lastModifiedDate":"2022-09-18"},{"lineNumber":119,"author":{"gitId":"roshankumar1991"},"content":"            System.out.println(\"Noted. I\u0027ve removed this task:\");","lastModifiedDate":"2022-09-18"},{"lineNumber":120,"author":{"gitId":"roshankumar1991"},"content":"            System.out.println(list.get(n - 1));","lastModifiedDate":"2022-09-18"},{"lineNumber":121,"author":{"gitId":"roshankumar1991"},"content":"            list.remove(n - 1);","lastModifiedDate":"2022-09-18"},{"lineNumber":122,"author":{"gitId":"roshankumar1991"},"content":"            count--;","lastModifiedDate":"2022-09-18"},{"lineNumber":123,"author":{"gitId":"roshankumar1991"},"content":"            System.out.println(\"Now you have \" + count + \" tasks in the list.\");","lastModifiedDate":"2022-09-18"},{"lineNumber":124,"author":{"gitId":"roshankumar1991"},"content":"        }","lastModifiedDate":"2022-09-18"},{"lineNumber":125,"author":{"gitId":"roshankumar1991"},"content":"    }","lastModifiedDate":"2022-09-18"},{"lineNumber":126,"author":{"gitId":"roshankumar1991"},"content":"","lastModifiedDate":"2022-09-18"},{"lineNumber":127,"author":{"gitId":"roshankumar1991"},"content":"    /**","lastModifiedDate":"2022-09-19"},{"lineNumber":128,"author":{"gitId":"roshankumar1991"},"content":"     * This method is to add a Todo task.","lastModifiedDate":"2022-09-19"},{"lineNumber":129,"author":{"gitId":"roshankumar1991"},"content":"     * @param line Provides the description of the task.","lastModifiedDate":"2022-09-19"},{"lineNumber":130,"author":{"gitId":"roshankumar1991"},"content":"     * @throws DukeException Throws various exceptions if the user-input is invalid.","lastModifiedDate":"2022-09-19"},{"lineNumber":131,"author":{"gitId":"roshankumar1991"},"content":"     */","lastModifiedDate":"2022-09-19"},{"lineNumber":132,"author":{"gitId":"roshankumar1991"},"content":"","lastModifiedDate":"2022-09-19"},{"lineNumber":133,"author":{"gitId":"roshankumar1991"},"content":"    public static void Todo(String line) throws DukeException {","lastModifiedDate":"2022-09-18"},{"lineNumber":134,"author":{"gitId":"roshankumar1991"},"content":"        if (line.trim().length() \u003c 5) {","lastModifiedDate":"2022-09-18"},{"lineNumber":135,"author":{"gitId":"roshankumar1991"},"content":"            throw new DukeException(\"Error: Description of task cannot be empty.\\n\");","lastModifiedDate":"2022-09-18"},{"lineNumber":136,"author":{"gitId":"roshankumar1991"},"content":"        }","lastModifiedDate":"2022-09-18"},{"lineNumber":137,"author":{"gitId":"roshankumar1991"},"content":"        int m \u003d line.toLowerCase().indexOf(\"todo\");","lastModifiedDate":"2022-09-18"},{"lineNumber":138,"author":{"gitId":"roshankumar1991"},"content":"        String description \u003d line.substring(m + 4).trim();","lastModifiedDate":"2022-09-18"},{"lineNumber":139,"author":{"gitId":"roshankumar1991"},"content":"        for (Task l : list) {","lastModifiedDate":"2022-09-18"},{"lineNumber":140,"author":{"gitId":"roshankumar1991"},"content":"            if (l.description.equals(description)) {","lastModifiedDate":"2022-09-18"},{"lineNumber":141,"author":{"gitId":"roshankumar1991"},"content":"                throw new DukeException(\"Error: Task has already been added previously\\n\");","lastModifiedDate":"2022-09-18"},{"lineNumber":142,"author":{"gitId":"roshankumar1991"},"content":"            }","lastModifiedDate":"2022-09-18"},{"lineNumber":143,"author":{"gitId":"roshankumar1991"},"content":"        }","lastModifiedDate":"2022-09-18"},{"lineNumber":144,"author":{"gitId":"roshankumar1991"},"content":"        list.add(new Todo(description));","lastModifiedDate":"2022-09-18"},{"lineNumber":145,"author":{"gitId":"roshankumar1991"},"content":"        UpdateStatus();","lastModifiedDate":"2022-09-18"},{"lineNumber":146,"author":{"gitId":"roshankumar1991"},"content":"    }","lastModifiedDate":"2022-09-18"},{"lineNumber":147,"author":{"gitId":"roshankumar1991"},"content":"","lastModifiedDate":"2022-09-18"},{"lineNumber":148,"author":{"gitId":"roshankumar1991"},"content":"    /**","lastModifiedDate":"2022-09-19"},{"lineNumber":149,"author":{"gitId":"roshankumar1991"},"content":"     * This method is to add a Deadline task.","lastModifiedDate":"2022-09-19"},{"lineNumber":150,"author":{"gitId":"roshankumar1991"},"content":"     * @param line Provides the description of the task.","lastModifiedDate":"2022-09-19"},{"lineNumber":151,"author":{"gitId":"roshankumar1991"},"content":"     * @param localDate Provides the scheduled Date of the completion of the task.","lastModifiedDate":"2022-09-19"},{"lineNumber":152,"author":{"gitId":"roshankumar1991"},"content":"     * @throws DukeException Throws various exceptions if the user-input is invalid.","lastModifiedDate":"2022-09-19"},{"lineNumber":153,"author":{"gitId":"roshankumar1991"},"content":"     */","lastModifiedDate":"2022-09-19"},{"lineNumber":154,"author":{"gitId":"roshankumar1991"},"content":"","lastModifiedDate":"2022-09-19"},{"lineNumber":155,"author":{"gitId":"roshankumar1991"},"content":"    public static void Deadline(String line, LocalDate localDate) throws DukeException {","lastModifiedDate":"2022-09-19"},{"lineNumber":156,"author":{"gitId":"roshankumar1991"},"content":"        if (line.trim().length() \u003c 9) {","lastModifiedDate":"2022-09-18"},{"lineNumber":157,"author":{"gitId":"roshankumar1991"},"content":"            throw new DukeException(\"Error: Description of task cannot be empty.\\n\");","lastModifiedDate":"2022-09-18"},{"lineNumber":158,"author":{"gitId":"roshankumar1991"},"content":"        }","lastModifiedDate":"2022-09-18"},{"lineNumber":159,"author":{"gitId":"roshankumar1991"},"content":"        if (!line.contains(\"/\")) {","lastModifiedDate":"2022-09-18"},{"lineNumber":160,"author":{"gitId":"roshankumar1991"},"content":"            throw new DukeException(\"Error: Please specify time.\\n\");","lastModifiedDate":"2022-09-18"},{"lineNumber":161,"author":{"gitId":"roshankumar1991"},"content":"        }","lastModifiedDate":"2022-09-18"},{"lineNumber":162,"author":{"gitId":"roshankumar1991"},"content":"        int m \u003d line.toLowerCase().indexOf(\"deadline\");","lastModifiedDate":"2022-09-18"},{"lineNumber":163,"author":{"gitId":"roshankumar1991"},"content":"        int n \u003d line.indexOf(\u0027/\u0027);","lastModifiedDate":"2022-09-18"},{"lineNumber":164,"author":{"gitId":"roshankumar1991"},"content":"        String description \u003d line.substring(m + 8, n).trim();","lastModifiedDate":"2022-09-18"},{"lineNumber":165,"author":{"gitId":"roshankumar1991"},"content":"        for (Task l : list) {","lastModifiedDate":"2022-09-18"},{"lineNumber":166,"author":{"gitId":"roshankumar1991"},"content":"            if (l.description.equals(description)) {","lastModifiedDate":"2022-09-18"},{"lineNumber":167,"author":{"gitId":"roshankumar1991"},"content":"                throw new DukeException(\"Error: Task has already been added previously\\n\");","lastModifiedDate":"2022-09-18"},{"lineNumber":168,"author":{"gitId":"roshankumar1991"},"content":"            }","lastModifiedDate":"2022-09-18"},{"lineNumber":169,"author":{"gitId":"roshankumar1991"},"content":"        }","lastModifiedDate":"2022-09-18"},{"lineNumber":170,"author":{"gitId":"roshankumar1991"},"content":"        list.add(new Deadline(description, localDate));","lastModifiedDate":"2022-09-19"},{"lineNumber":171,"author":{"gitId":"roshankumar1991"},"content":"        UpdateStatus();","lastModifiedDate":"2022-09-18"},{"lineNumber":172,"author":{"gitId":"roshankumar1991"},"content":"    }","lastModifiedDate":"2022-09-18"},{"lineNumber":173,"author":{"gitId":"roshankumar1991"},"content":"","lastModifiedDate":"2022-09-18"},{"lineNumber":174,"author":{"gitId":"roshankumar1991"},"content":"    /**","lastModifiedDate":"2022-09-19"},{"lineNumber":175,"author":{"gitId":"roshankumar1991"},"content":"     * This method is to add an Event task.","lastModifiedDate":"2022-09-19"},{"lineNumber":176,"author":{"gitId":"roshankumar1991"},"content":"     * @param line Provides the description of the task.","lastModifiedDate":"2022-09-19"},{"lineNumber":177,"author":{"gitId":"roshankumar1991"},"content":"     * @param localDate Provides the scheduled Date of the completion of the task.","lastModifiedDate":"2022-09-19"},{"lineNumber":178,"author":{"gitId":"roshankumar1991"},"content":"     * @throws DukeException Throws various exceptions if the user-input is invalid.","lastModifiedDate":"2022-09-19"},{"lineNumber":179,"author":{"gitId":"roshankumar1991"},"content":"     */","lastModifiedDate":"2022-09-19"},{"lineNumber":180,"author":{"gitId":"roshankumar1991"},"content":"","lastModifiedDate":"2022-09-19"},{"lineNumber":181,"author":{"gitId":"roshankumar1991"},"content":"    public static void Event(String line, LocalDate localDate) throws DukeException {","lastModifiedDate":"2022-09-19"},{"lineNumber":182,"author":{"gitId":"roshankumar1991"},"content":"        if (line.trim().length() \u003c 6) {","lastModifiedDate":"2022-09-18"},{"lineNumber":183,"author":{"gitId":"roshankumar1991"},"content":"            throw new DukeException(\"Error: Description of task cannot be empty.\\n\");","lastModifiedDate":"2022-09-18"},{"lineNumber":184,"author":{"gitId":"roshankumar1991"},"content":"        }","lastModifiedDate":"2022-09-18"},{"lineNumber":185,"author":{"gitId":"roshankumar1991"},"content":"        if (!line.contains(\"/\")) {","lastModifiedDate":"2022-09-18"},{"lineNumber":186,"author":{"gitId":"roshankumar1991"},"content":"            throw new DukeException(\"Error: Please specify time.\\n\");","lastModifiedDate":"2022-09-18"},{"lineNumber":187,"author":{"gitId":"roshankumar1991"},"content":"        }","lastModifiedDate":"2022-09-18"},{"lineNumber":188,"author":{"gitId":"roshankumar1991"},"content":"        int m \u003d line.toLowerCase().indexOf(\"event\");","lastModifiedDate":"2022-09-18"},{"lineNumber":189,"author":{"gitId":"roshankumar1991"},"content":"        int n \u003d line.indexOf(\u0027/\u0027);","lastModifiedDate":"2022-09-18"},{"lineNumber":190,"author":{"gitId":"roshankumar1991"},"content":"        String description \u003d line.substring(m + 5, n).trim();","lastModifiedDate":"2022-09-18"},{"lineNumber":191,"author":{"gitId":"roshankumar1991"},"content":"        for (Task l : list) {","lastModifiedDate":"2022-09-18"},{"lineNumber":192,"author":{"gitId":"roshankumar1991"},"content":"            if (l.description.equals(description)) {","lastModifiedDate":"2022-09-18"},{"lineNumber":193,"author":{"gitId":"roshankumar1991"},"content":"                throw new DukeException(\"Error: Task has already been added previously\\n\");","lastModifiedDate":"2022-09-18"},{"lineNumber":194,"author":{"gitId":"roshankumar1991"},"content":"            }","lastModifiedDate":"2022-09-18"},{"lineNumber":195,"author":{"gitId":"roshankumar1991"},"content":"        }","lastModifiedDate":"2022-09-18"},{"lineNumber":196,"author":{"gitId":"roshankumar1991"},"content":"        list.add(new Event(description, localDate));","lastModifiedDate":"2022-09-19"},{"lineNumber":197,"author":{"gitId":"roshankumar1991"},"content":"        UpdateStatus();","lastModifiedDate":"2022-09-18"},{"lineNumber":198,"author":{"gitId":"roshankumar1991"},"content":"    }","lastModifiedDate":"2022-09-18"},{"lineNumber":199,"author":{"gitId":"roshankumar1991"},"content":"","lastModifiedDate":"2022-09-18"},{"lineNumber":200,"author":{"gitId":"roshankumar1991"},"content":"    public static void UpdateStatus() {","lastModifiedDate":"2022-09-18"},{"lineNumber":201,"author":{"gitId":"roshankumar1991"},"content":"        System.out.println(\"Got it. I\u0027ve added this task:\");","lastModifiedDate":"2022-09-18"},{"lineNumber":202,"author":{"gitId":"roshankumar1991"},"content":"        System.out.println(list.get(count));","lastModifiedDate":"2022-09-18"},{"lineNumber":203,"author":{"gitId":"roshankumar1991"},"content":"        count++;","lastModifiedDate":"2022-09-18"},{"lineNumber":204,"author":{"gitId":"roshankumar1991"},"content":"        System.out.println(\"Now you have \" + count + \" tasks in the list.\");","lastModifiedDate":"2022-09-18"},{"lineNumber":205,"author":{"gitId":"roshankumar1991"},"content":"    }","lastModifiedDate":"2022-09-18"},{"lineNumber":206,"author":{"gitId":"roshankumar1991"},"content":"}","lastModifiedDate":"2022-09-18"},{"lineNumber":207,"author":{"gitId":"roshankumar1991"},"content":"","lastModifiedDate":"2022-09-18"}],"authorContributionMap":{"roshankumar1991":207}},{"path":"src/main/java/task/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"roshankumar1991"},"content":"package task;","lastModifiedDate":"2022-09-09"},{"lineNumber":2,"author":{"gitId":"roshankumar1991"},"content":"","lastModifiedDate":"2022-09-09"},{"lineNumber":3,"author":{"gitId":"roshankumar1991"},"content":"/**","lastModifiedDate":"2022-09-18"},{"lineNumber":4,"author":{"gitId":"roshankumar1991"},"content":" * This program is a child of the Task program. It helps add a classification to the Task program.","lastModifiedDate":"2022-09-18"},{"lineNumber":5,"author":{"gitId":"roshankumar1991"},"content":" * This form of program includes a task that includes only a description but has no time set for its completion.","lastModifiedDate":"2022-09-18"},{"lineNumber":6,"author":{"gitId":"roshankumar1991"},"content":" */","lastModifiedDate":"2022-09-18"},{"lineNumber":7,"author":{"gitId":"roshankumar1991"},"content":"","lastModifiedDate":"2022-09-18"},{"lineNumber":8,"author":{"gitId":"roshankumar1991"},"content":"public class Todo extends Task {","lastModifiedDate":"2022-08-19"},{"lineNumber":9,"author":{"gitId":"roshankumar1991"},"content":"","lastModifiedDate":"2022-08-19"},{"lineNumber":10,"author":{"gitId":"roshankumar1991"},"content":"    /**","lastModifiedDate":"2022-09-18"},{"lineNumber":11,"author":{"gitId":"roshankumar1991"},"content":"     * This method provides a description for the Todo task.","lastModifiedDate":"2022-09-18"},{"lineNumber":12,"author":{"gitId":"roshankumar1991"},"content":"     * @param description Provides a description for the Todo task.","lastModifiedDate":"2022-09-18"},{"lineNumber":13,"author":{"gitId":"roshankumar1991"},"content":"     */","lastModifiedDate":"2022-09-18"},{"lineNumber":14,"author":{"gitId":"roshankumar1991"},"content":"","lastModifiedDate":"2022-09-18"},{"lineNumber":15,"author":{"gitId":"roshankumar1991"},"content":"    public Todo(String description) {","lastModifiedDate":"2022-08-19"},{"lineNumber":16,"author":{"gitId":"roshankumar1991"},"content":"        super(description);","lastModifiedDate":"2022-08-19"},{"lineNumber":17,"author":{"gitId":"roshankumar1991"},"content":"    }","lastModifiedDate":"2022-08-19"},{"lineNumber":18,"author":{"gitId":"roshankumar1991"},"content":"","lastModifiedDate":"2022-08-19"},{"lineNumber":19,"author":{"gitId":"roshankumar1991"},"content":"    /**","lastModifiedDate":"2022-09-18"},{"lineNumber":20,"author":{"gitId":"roshankumar1991"},"content":"     * This method provides a String format return for the Todo task.","lastModifiedDate":"2022-09-18"},{"lineNumber":21,"author":{"gitId":"roshankumar1991"},"content":"     * @return Returns a String in the unique format specified in the method.","lastModifiedDate":"2022-09-18"},{"lineNumber":22,"author":{"gitId":"roshankumar1991"},"content":"     */","lastModifiedDate":"2022-09-18"},{"lineNumber":23,"author":{"gitId":"roshankumar1991"},"content":"","lastModifiedDate":"2022-09-18"},{"lineNumber":24,"author":{"gitId":"roshankumar1991"},"content":"    @Override","lastModifiedDate":"2022-08-19"},{"lineNumber":25,"author":{"gitId":"roshankumar1991"},"content":"    public String toString() {","lastModifiedDate":"2022-08-19"},{"lineNumber":26,"author":{"gitId":"roshankumar1991"},"content":"        return \"[T]\" + \"[\" + getStatusIcon() + \"] \" + getDescription();","lastModifiedDate":"2022-09-09"},{"lineNumber":27,"author":{"gitId":"roshankumar1991"},"content":"    }","lastModifiedDate":"2022-08-19"},{"lineNumber":28,"author":{"gitId":"roshankumar1991"},"content":"}","lastModifiedDate":"2022-08-19"},{"lineNumber":29,"author":{"gitId":"roshankumar1991"},"content":"","lastModifiedDate":"2022-08-19"}],"authorContributionMap":{"roshankumar1991":29}},{"path":"src/test/java/DeadlineTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"roshankumar1991"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-09-24"},{"lineNumber":2,"author":{"gitId":"roshankumar1991"},"content":"import task.*;","lastModifiedDate":"2022-09-24"},{"lineNumber":3,"author":{"gitId":"roshankumar1991"},"content":"","lastModifiedDate":"2022-09-24"},{"lineNumber":4,"author":{"gitId":"roshankumar1991"},"content":"import java.time.LocalDate;","lastModifiedDate":"2022-09-24"},{"lineNumber":5,"author":{"gitId":"roshankumar1991"},"content":"","lastModifiedDate":"2022-09-24"},{"lineNumber":6,"author":{"gitId":"roshankumar1991"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2022-09-24"},{"lineNumber":7,"author":{"gitId":"roshankumar1991"},"content":"","lastModifiedDate":"2022-09-24"},{"lineNumber":8,"author":{"gitId":"roshankumar1991"},"content":"public class DeadlineTest {","lastModifiedDate":"2022-09-24"},{"lineNumber":9,"author":{"gitId":"roshankumar1991"},"content":"    @Test","lastModifiedDate":"2022-09-24"},{"lineNumber":10,"author":{"gitId":"roshankumar1991"},"content":"    public void stringType(){","lastModifiedDate":"2022-09-24"},{"lineNumber":11,"author":{"gitId":"roshankumar1991"},"content":"        var response \u003d new Deadline(\"study\", LocalDate.parse(\"2022-11-24\"));","lastModifiedDate":"2022-09-24"},{"lineNumber":12,"author":{"gitId":"roshankumar1991"},"content":"        assertEquals(\"[D]\" + \"[\" + response.getStatusIcon() + \"] \" + \"study\" + \" (by: \" + \"Nov 24 2022\" + \")\", String.valueOf(response));","lastModifiedDate":"2022-09-24"},{"lineNumber":13,"author":{"gitId":"roshankumar1991"},"content":"    }","lastModifiedDate":"2022-09-24"},{"lineNumber":14,"author":{"gitId":"roshankumar1991"},"content":"}","lastModifiedDate":"2022-09-24"}],"authorContributionMap":{"roshankumar1991":14}},{"path":"src/test/java/EventTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"roshankumar1991"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-09-24"},{"lineNumber":2,"author":{"gitId":"roshankumar1991"},"content":"import task.*;","lastModifiedDate":"2022-09-24"},{"lineNumber":3,"author":{"gitId":"roshankumar1991"},"content":"","lastModifiedDate":"2022-09-24"},{"lineNumber":4,"author":{"gitId":"roshankumar1991"},"content":"import java.time.LocalDate;","lastModifiedDate":"2022-09-24"},{"lineNumber":5,"author":{"gitId":"roshankumar1991"},"content":"","lastModifiedDate":"2022-09-24"},{"lineNumber":6,"author":{"gitId":"roshankumar1991"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2022-09-24"},{"lineNumber":7,"author":{"gitId":"roshankumar1991"},"content":"","lastModifiedDate":"2022-09-24"},{"lineNumber":8,"author":{"gitId":"roshankumar1991"},"content":"public class EventTest {","lastModifiedDate":"2022-09-24"},{"lineNumber":9,"author":{"gitId":"roshankumar1991"},"content":"    @Test","lastModifiedDate":"2022-09-24"},{"lineNumber":10,"author":{"gitId":"roshankumar1991"},"content":"    public void stringType(){","lastModifiedDate":"2022-09-24"},{"lineNumber":11,"author":{"gitId":"roshankumar1991"},"content":"        var response \u003d new Event(\"awards ceremony\", LocalDate.parse(\"2022-09-25\"));","lastModifiedDate":"2022-09-24"},{"lineNumber":12,"author":{"gitId":"roshankumar1991"},"content":"        assertEquals(\"[E]\" + \"[\" + response.getStatusIcon() + \"] \" + \"awards ceremony\" + \" (at: \" + \"Sep 25 2022\" + \")\", String.valueOf(response));","lastModifiedDate":"2022-09-24"},{"lineNumber":13,"author":{"gitId":"roshankumar1991"},"content":"    }","lastModifiedDate":"2022-09-24"},{"lineNumber":14,"author":{"gitId":"roshankumar1991"},"content":"}","lastModifiedDate":"2022-09-24"}],"authorContributionMap":{"roshankumar1991":14}},{"path":"src/test/java/TodoTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"roshankumar1991"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-09-24"},{"lineNumber":2,"author":{"gitId":"roshankumar1991"},"content":"import task.*;","lastModifiedDate":"2022-09-24"},{"lineNumber":3,"author":{"gitId":"roshankumar1991"},"content":"","lastModifiedDate":"2022-09-24"},{"lineNumber":4,"author":{"gitId":"roshankumar1991"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2022-09-24"},{"lineNumber":5,"author":{"gitId":"roshankumar1991"},"content":"","lastModifiedDate":"2022-09-24"},{"lineNumber":6,"author":{"gitId":"roshankumar1991"},"content":"public class TodoTest {","lastModifiedDate":"2022-09-24"},{"lineNumber":7,"author":{"gitId":"roshankumar1991"},"content":"    @Test","lastModifiedDate":"2022-09-24"},{"lineNumber":8,"author":{"gitId":"roshankumar1991"},"content":"    public void stringType(){","lastModifiedDate":"2022-09-24"},{"lineNumber":9,"author":{"gitId":"roshankumar1991"},"content":"        var response \u003d new Todo(\"read\");","lastModifiedDate":"2022-09-24"},{"lineNumber":10,"author":{"gitId":"roshankumar1991"},"content":"        assertEquals(\"[T]\" + \"[\" + response.getStatusIcon() + \"] \" + \"read\", String.valueOf(response));","lastModifiedDate":"2022-09-24"},{"lineNumber":11,"author":{"gitId":"roshankumar1991"},"content":"    }","lastModifiedDate":"2022-09-24"},{"lineNumber":12,"author":{"gitId":"roshankumar1991"},"content":"}","lastModifiedDate":"2022-09-24"}],"authorContributionMap":{"roshankumar1991":12}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java","lastModifiedDate":"2020-08-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"roshankumar1991"},"content":"java -classpath ..\\bin command.Duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2022-09-09"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"-":20,"roshankumar1991":1}}]
